	.file	"call1.c"
 # GNU C17 (Rev4, Built by MSYS2 project) version 10.2.0 (x86_64-w64-mingw32)
 #	compiled by GNU C version 10.2.0, GMP version 6.2.0, MPFR version 4.1.0, MPC version 1.2.0, isl version isl-0.22.1-GMP

 # GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
 # options passed: 
 # -iprefix C:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/10.2.0/
 # -D_REENTRANT call1.c -mtune=generic -march=x86-64 -g -Wall -Wextra
 # -fno-asynchronous-unwind-tables -fno-exceptions -fno-rtti -fverbose-asm
 # options enabled:  -faggressive-loop-optimizations -fallocation-dce
 # -fauto-inc-dec -fdelete-null-pointer-checks -fdwarf2-cfi-asm
 # -fearly-inlining -feliminate-unused-debug-symbols
 # -feliminate-unused-debug-types -ffp-int-builtin-inexact -ffunction-cse
 # -fgcse-lm -fgnu-unique -fident -finline-atomics -fipa-stack-alignment
 # -fira-hoist-pressure -fira-share-save-slots -fira-share-spill-slots
 # -fivopts -fkeep-inline-dllexport -fkeep-static-consts
 # -fleading-underscore -flifetime-dse -fmath-errno -fmerge-debug-strings
 # -fpeephole -fpic -fplt -fprefetch-loop-arrays -freg-struct-return
 # -fsched-critical-path-heuristic -fsched-dep-count-heuristic
 # -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
 # -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
 # -fsched-stalled-insns-dep -fschedule-fusion -fsemantic-interposition
 # -fset-stack-executable -fshow-column -fshrink-wrap-separate
 # -fsigned-zeros -fsplit-ivs-in-unroller -fssa-backprop -fstdarg-opt
 # -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
 # -ftree-cselim -ftree-forwprop -ftree-loop-if-convert -ftree-loop-im
 # -ftree-loop-ivcanon -ftree-loop-optimize -ftree-parallelize-loops=
 # -ftree-phiprop -ftree-reassoc -ftree-scev-cprop -funit-at-a-time
 # -fverbose-asm -fzero-initialized-in-bss -m128bit-long-double -m64
 # -m80387 -maccumulate-outgoing-args -malign-double -malign-stringops
 # -mavx256-split-unaligned-load -mavx256-split-unaligned-store
 # -mfancy-math-387 -mfp-ret-in-387 -mfxsr -mieee-fp -mlong-double-80 -mmmx
 # -mms-bitfields -mno-sse4 -mpush-args -mred-zone -msse -msse2
 # -mstack-arg-probe -mstackrealign -mvzeroupper

	.text
.Ltext0:
	.cfi_sections	.debug_frame
	.globl	bar
	.def	bar;	.scl	2;	.type	32;	.endef
bar:
.LFB0:
	.file 1 "call1.c"
	.loc 1 1 17
	.cfi_startproc
	pushq	%rbp	 #
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	 #,
	.cfi_def_cfa_register 6
	movl	%ecx, 16(%rbp)	 # i, i
 # call1.c:1: void bar(int i) {}
	.loc 1 1 18
	nop	
	popq	%rbp	 #
	.cfi_restore 6
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE0:
	.globl	foo
	.def	foo;	.scl	2;	.type	32;	.endef
foo:
.LFB1:
	.loc 1 8 17
	.cfi_startproc
	pushq	%rbp	 #
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	 #,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	 #,
	movl	%ecx, 16(%rbp)	 # p0, p0
	movl	%edx, 24(%rbp)	 # p1, p1
	movl	%r8d, 32(%rbp)	 # p2, p2
	movl	%r9d, 40(%rbp)	 # p3, p3
 # call1.c:10:     bar(9001);
	.loc 1 10 5
	movl	$9001, %ecx	 #,
	call	bar	 #
 # call1.c:11:     int blah = 100;
	.loc 1 11 9
	movl	$100, -4(%rbp)	 #, blah
 # call1.c:12:     int sum = p0 + p1 + p2 + p3 + p4 + p5 + p6;
	.loc 1 12 18
	movl	16(%rbp), %edx	 # p0, tmp89
	movl	24(%rbp), %eax	 # p1, tmp90
	addl	%eax, %edx	 # tmp90, _1
 # call1.c:12:     int sum = p0 + p1 + p2 + p3 + p4 + p5 + p6;
	.loc 1 12 23
	movl	32(%rbp), %eax	 # p2, tmp91
	addl	%eax, %edx	 # tmp91, _2
 # call1.c:12:     int sum = p0 + p1 + p2 + p3 + p4 + p5 + p6;
	.loc 1 12 28
	movl	40(%rbp), %eax	 # p3, tmp92
	addl	%eax, %edx	 # tmp92, _3
 # call1.c:12:     int sum = p0 + p1 + p2 + p3 + p4 + p5 + p6;
	.loc 1 12 33
	movl	48(%rbp), %eax	 # p4, tmp93
	addl	%eax, %edx	 # tmp93, _4
 # call1.c:12:     int sum = p0 + p1 + p2 + p3 + p4 + p5 + p6;
	.loc 1 12 38
	movl	56(%rbp), %eax	 # p5, tmp94
	addl	%eax, %edx	 # tmp94, _5
 # call1.c:12:     int sum = p0 + p1 + p2 + p3 + p4 + p5 + p6;
	.loc 1 12 9
	movl	64(%rbp), %eax	 # p6, tmp98
	addl	%edx, %eax	 # _5, tmp97
	movl	%eax, -8(%rbp)	 # tmp97, sum
 # call1.c:13:     return sum + blah;
	.loc 1 13 16
	movl	-8(%rbp), %edx	 # sum, tmp99
	movl	-4(%rbp), %eax	 # blah, tmp100
	addl	%edx, %eax	 # tmp99, _17
 # call1.c:14: }
	.loc 1 14 1
	leave	
	.cfi_restore 6
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1:
	.def	__main;	.scl	2;	.type	32;	.endef
	.globl	main
	.def	main;	.scl	2;	.type	32;	.endef
main:
.LFB2:
	.loc 1 15 12
	.cfi_startproc
	pushq	%rbp	 #
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	 #,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	 #,
 # call1.c:15: int main() {
	.loc 1 15 12
	call	__main	 #
 # call1.c:16:     return foo(0, 1, 2, 3, 4, 5, 6);
	.loc 1 16 12
	movl	$6, 48(%rsp)	 #,
	movl	$5, 40(%rsp)	 #,
	movl	$4, 32(%rsp)	 #,
	movl	$3, %r9d	 #,
	movl	$2, %r8d	 #,
	movl	$1, %edx	 #,
	movl	$0, %ecx	 #,
	call	foo	 #
 # call1.c:17: }
	.loc 1 17 1
	leave	
	.cfi_restore 6
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2:
.Letext0:
	.section	.debug_info,"dr"
.Ldebug_info0:
	.long	0x1b7
	.word	0x4
	.secrel32	.Ldebug_abbrev0
	.byte	0x8
	.uleb128 0x1
	.ascii "GNU C17 10.2.0 -mtune=generic -march=x86-64 -g -fno-asynchronous-unwind-tables -fno-exceptions -fno-rtti\0"
	.byte	0xc
	.ascii "call1.c\0"
	.ascii "c:\\Users\\Mykola\\Documents\\src\\fs-coollang\\sandbox\\asm\0"
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.secrel32	.Ldebug_line0
	.uleb128 0x2
	.ascii "main\0"
	.byte	0x1
	.byte	0xf
	.byte	0x5
	.long	0xe7
	.quad	.LFB2
	.quad	.LFE2-.LFB2
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x3
	.byte	0x4
	.byte	0x5
	.ascii "int\0"
	.uleb128 0x4
	.ascii "foo\0"
	.byte	0x1
	.byte	0x2
	.byte	0x5
	.long	0xe7
	.quad	.LFB1
	.quad	.LFE1-.LFB1
	.uleb128 0x1
	.byte	0x9c
	.long	0x192
	.uleb128 0x5
	.ascii "p0\0"
	.byte	0x1
	.byte	0x2
	.byte	0xd
	.long	0xe7
	.uleb128 0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x5
	.ascii "p1\0"
	.byte	0x1
	.byte	0x3
	.byte	0xd
	.long	0xe7
	.uleb128 0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x5
	.ascii "p2\0"
	.byte	0x1
	.byte	0x4
	.byte	0xd
	.long	0xe7
	.uleb128 0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x5
	.ascii "p3\0"
	.byte	0x1
	.byte	0x5
	.byte	0xd
	.long	0xe7
	.uleb128 0x2
	.byte	0x91
	.sleb128 24
	.uleb128 0x5
	.ascii "p4\0"
	.byte	0x1
	.byte	0x6
	.byte	0xd
	.long	0xe7
	.uleb128 0x2
	.byte	0x91
	.sleb128 32
	.uleb128 0x5
	.ascii "p5\0"
	.byte	0x1
	.byte	0x7
	.byte	0xd
	.long	0xe7
	.uleb128 0x2
	.byte	0x91
	.sleb128 40
	.uleb128 0x5
	.ascii "p6\0"
	.byte	0x1
	.byte	0x8
	.byte	0xd
	.long	0xe7
	.uleb128 0x2
	.byte	0x91
	.sleb128 48
	.uleb128 0x6
	.ascii "blah\0"
	.byte	0x1
	.byte	0xb
	.byte	0x9
	.long	0xe7
	.uleb128 0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x6
	.ascii "sum\0"
	.byte	0x1
	.byte	0xc
	.byte	0x9
	.long	0xe7
	.uleb128 0x2
	.byte	0x91
	.sleb128 -24
	.byte	0
	.uleb128 0x7
	.ascii "bar\0"
	.byte	0x1
	.byte	0x1
	.byte	0x6
	.quad	.LFB0
	.quad	.LFE0-.LFB0
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x5
	.ascii "i\0"
	.byte	0x1
	.byte	0x1
	.byte	0xe
	.long	0xe7
	.uleb128 0x2
	.byte	0x91
	.sleb128 0
	.byte	0
	.byte	0
	.section	.debug_abbrev,"dr"
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0x8
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x1b
	.uleb128 0x8
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2117
	.uleb128 0x19
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_aranges,"dr"
	.long	0x2c
	.word	0x2
	.secrel32	.Ldebug_info0
	.byte	0x8
	.byte	0
	.word	0
	.word	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"dr"
.Ldebug_line0:
	.section	.debug_str,"dr"
	.ident	"GCC: (Rev4, Built by MSYS2 project) 10.2.0"
