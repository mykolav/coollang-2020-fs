    .data
    .global class_name_table
    .global Main_proto_obj
    .global Main..ctor

    .quad -1
str_const_0:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_0 # length = 0
    # ''
    .byte 0 # terminator
    .zero 7 # payload's size in bytes = 25, pad to an 8 byte boundary
    .quad -1
str_const_1:
    .quad 3 # tag
    .quad 9 # size in quads
    .quad String_vtable
    .quad int_const_1 # length = 43
    # '../../../CoolPrograms/Valid/HelloCool1.cool'
    .byte 46, 46, 47, 46, 46, 47, 46, 46, 47, 67, 111, 111, 108, 80, 114, 111, 103, 114, 97, 109, 115, 47, 86, 97, 108, 105, 100, 47, 72, 101, 108, 108, 111, 67, 111, 111, 108, 49, 46, 99, 111, 111, 108
    .byte 0 # terminator
    .zero 4 # payload's size in bytes = 68, pad to an 8 byte boundary
    .quad -1
str_const_2:
    .quad 3 # tag
    .quad 6 # size in quads
    .quad String_vtable
    .quad int_const_2 # length = 16
    # 'Hello, Cool2020!'
    .byte 72, 101, 108, 108, 111, 44, 32, 67, 111, 111, 108, 50, 48, 50, 48, 33
    .byte 0 # terminator
    .zero 7 # payload's size in bytes = 41, pad to an 8 byte boundary
    .quad -1
str_const_3:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_3 # length = 3
    # 'Any'
    .byte 65, 110, 121
    .byte 0 # terminator
    .zero 4 # payload's size in bytes = 28, pad to an 8 byte boundary
    .quad -1
str_const_4:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_4 # length = 4
    # 'Unit'
    .byte 85, 110, 105, 116
    .byte 0 # terminator
    .zero 3 # payload's size in bytes = 29, pad to an 8 byte boundary
    .quad -1
str_const_5:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_3 # length = 3
    # 'Int'
    .byte 73, 110, 116
    .byte 0 # terminator
    .zero 4 # payload's size in bytes = 28, pad to an 8 byte boundary
    .quad -1
str_const_6:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_5 # length = 6
    # 'String'
    .byte 83, 116, 114, 105, 110, 103
    .byte 0 # terminator
    .zero 1 # payload's size in bytes = 31, pad to an 8 byte boundary
    .quad -1
str_const_7:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_6 # length = 7
    # 'Boolean'
    .byte 66, 111, 111, 108, 101, 97, 110
    .byte 0 # terminator
    .quad -1
str_const_8:
    .quad 3 # tag
    .quad 5 # size in quads
    .quad String_vtable
    .quad int_const_7 # length = 8
    # 'ArrayAny'
    .byte 65, 114, 114, 97, 121, 65, 110, 121
    .byte 0 # terminator
    .zero 7 # payload's size in bytes = 33, pad to an 8 byte boundary
    .quad -1
str_const_9:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_8 # length = 2
    # 'IO'
    .byte 73, 79
    .byte 0 # terminator
    .zero 5 # payload's size in bytes = 27, pad to an 8 byte boundary
    .quad -1
str_const_10:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_4 # length = 4
    # 'Main'
    .byte 77, 97, 105, 110
    .byte 0 # terminator
    .zero 3 # payload's size in bytes = 29, pad to an 8 byte boundary
    .quad -1
int_const_0:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 0 # value
    .quad -1
int_const_1:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 43 # value
    .quad -1
int_const_2:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 16 # value
    .quad -1
int_const_3:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 3 # value
    .quad -1
int_const_4:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 4 # value
    .quad -1
int_const_5:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 6 # value
    .quad -1
int_const_6:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 7 # value
    .quad -1
int_const_7:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 8 # value
    .quad -1
int_const_8:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 2 # value
class_name_table:
    .quad str_const_3 # Any
    .quad str_const_4 # Unit
    .quad str_const_5 # Int
    .quad str_const_6 # String
    .quad str_const_7 # Boolean
    .quad str_const_8 # ArrayAny
    .quad str_const_9 # IO
    .quad str_const_10 # Main
class_parent_table:
    .quad -1 # Any
    .quad 0 # Unit extends Any
    .quad 0 # Int extends Any
    .quad 0 # String extends Any
    .quad 0 # Boolean extends Any
    .quad 0 # ArrayAny extends Any
    .quad 0 # IO extends Any
    .quad 0 # Main extends Any
Main_vtable:
    .quad Any.abort 
    .quad -1
Main_proto_obj:
    .quad 7 # tag
    .quad 3 # size in quads
    .quad Main_vtable

    .text
Main..ctor:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $48, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    # save callee-saved registers
    movq %rbx, -16(%rbp)
    movq %r12, -24(%rbp)
    movq %r13, -32(%rbp)
    movq %r14, -40(%rbp)
    movq %r15, -48(%rbp)
    # begin body
    # super dispatch Any..ctor
    pushq %r10
    pushq %r11
    # actual #0 -- 'this'
    movq -8(%rbp), %rbx
    subq $8, %rsp
    # store actual #0 'this' on stack
    movq %rbx, 0(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    # remove actuals loaded into registers from stack
    addq $8, %rsp
    call Any..ctor
    movq %rax, %rbx # store return value
    popq %r11
    popq %r10
    # dispatch IO.out_string
    pushq %r10
    pushq %r11
    # actual #0 -- 'this'
    # new IO
    pushq %r10
    pushq %r11
    # make a copy of the prototype object
    pushq %r10
    pushq %r11
    movq $IO_proto_obj, %rdi
    call .Runtime.copy_object
    popq %r11
    popq %r10
    movq %rax, %rbx
    subq $8, %rsp
    # store actual #0 'this' on stack
    movq %rbx, 0(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    # remove actuals loaded into registers from stack
    addq $8, %rsp
    call IO..ctor
    popq %r11
    popq %r10
    movq %rax, %rbx # store return value
    cmpq $0, %rbx
    jne .label_0 # the receiver is some
    pushq %r10
    pushq %r11
    movq $str_const_1, %rdi
    movq $3, %rsi
    movq $5, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_0: # the receiver is some
    subq $16, %rsp
    # store actual #0 'this' on stack
    movq %rbx, 0(%rsp)
    # actual #1
    movq $str_const_2, %rbx
    movq %rbx, 8(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    # remove actuals loaded into registers from stack
    addq $16, %rsp
    movq 16(%rdi), %rbx # IO_vtable
    movq 8(%rbx), %rbx # 'IO.out_string'
    call *%rbx
    popq %r11
    popq %r10
    movq %rax, %r10 # store return value
    # return 'this'
    movq -8(%rbp), %rbx
    movq %rbx, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
