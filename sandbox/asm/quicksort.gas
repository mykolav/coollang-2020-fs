    .data
    .global class_name_table
    .global Main_proto_obj

    .quad -1
str_const_0:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_0 # length = 0
    # ''
    .byte 0 # terminator
    .zero 7 # payload's size in bytes = 25, pad to an 8 byte boundary
    .quad -1
str_const_1:
    .quad 3 # tag
    .quad 9 # size in quads
    .quad String_vtable
    .quad int_const_11 # length = 42
    # '../../../CoolPrograms/Valid/QuickSort.cool'
    .byte 46, 46, 47, 46, 46, 47, 46, 46, 47, 67, 111, 111, 108, 80, 114, 111, 103, 114, 97, 109, 115, 47, 86, 97, 108, 105, 100, 47, 81, 117, 105, 99, 107, 83, 111, 114, 116, 46, 99, 111, 111, 108
    .byte 0 # terminator
    .zero 5 # payload's size in bytes = 67, pad to an 8 byte boundary
    .quad -1
str_const_2:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_3 # length = 1
    # ' '
    .byte 32
    .byte 0 # terminator
    .zero 6 # payload's size in bytes = 26, pad to an 8 byte boundary
    .quad -1
str_const_3:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_7 # length = 3
    # 'Any'
    .byte 65, 110, 121
    .byte 0 # terminator
    .zero 4 # payload's size in bytes = 28, pad to an 8 byte boundary
    .quad -1
str_const_4:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_9 # length = 4
    # 'Unit'
    .byte 85, 110, 105, 116
    .byte 0 # terminator
    .zero 3 # payload's size in bytes = 29, pad to an 8 byte boundary
    .quad -1
str_const_5:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_7 # length = 3
    # 'Int'
    .byte 73, 110, 116
    .byte 0 # terminator
    .zero 4 # payload's size in bytes = 28, pad to an 8 byte boundary
    .quad -1
str_const_6:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_12 # length = 6
    # 'String'
    .byte 83, 116, 114, 105, 110, 103
    .byte 0 # terminator
    .zero 1 # payload's size in bytes = 31, pad to an 8 byte boundary
    .quad -1
str_const_7:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_13 # length = 7
    # 'Boolean'
    .byte 66, 111, 111, 108, 101, 97, 110
    .byte 0 # terminator
    .quad -1
str_const_8:
    .quad 3 # tag
    .quad 5 # size in quads
    .quad String_vtable
    .quad int_const_14 # length = 8
    # 'ArrayAny'
    .byte 65, 114, 114, 97, 121, 65, 110, 121
    .byte 0 # terminator
    .zero 7 # payload's size in bytes = 33, pad to an 8 byte boundary
    .quad -1
str_const_9:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_5 # length = 2
    # 'IO'
    .byte 73, 79
    .byte 0 # terminator
    .zero 5 # payload's size in bytes = 27, pad to an 8 byte boundary
    .quad -1
str_const_10:
    .quad 3 # tag
    .quad 5 # size in quads
    .quad String_vtable
    .quad int_const_15 # length = 9
    # 'QuickSort'
    .byte 81, 117, 105, 99, 107, 83, 111, 114, 116
    .byte 0 # terminator
    .zero 6 # payload's size in bytes = 34, pad to an 8 byte boundary
    .quad -1
str_const_11:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_9 # length = 4
    # 'Main'
    .byte 77, 97, 105, 110
    .byte 0 # terminator
    .zero 3 # payload's size in bytes = 29, pad to an 8 byte boundary
    .quad -1
int_const_0:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 0 # value
    .quad -1
int_const_1:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 5 # value
    .quad -1
int_const_2:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 30 # value
    .quad -1
int_const_3:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 1 # value
    .quad -1
int_const_4:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 20 # value
    .quad -1
int_const_5:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 2 # value
    .quad -1
int_const_6:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 50 # value
    .quad -1
int_const_7:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 3 # value
    .quad -1
int_const_8:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 40 # value
    .quad -1
int_const_9:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 4 # value
    .quad -1
int_const_10:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 10 # value
    .quad -1
int_const_11:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 42 # value
    .quad -1
int_const_12:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 6 # value
    .quad -1
int_const_13:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 7 # value
    .quad -1
int_const_14:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 8 # value
    .quad -1
int_const_15:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 9 # value
class_name_table:
    .quad str_const_3 # Any
    .quad str_const_4 # Unit
    .quad str_const_5 # Int
    .quad str_const_6 # String
    .quad str_const_7 # Boolean
    .quad str_const_8 # ArrayAny
    .quad str_const_9 # IO
    .quad str_const_10 # QuickSort
    .quad str_const_11 # Main
class_parent_table:
    .quad -1 # Any
    .quad 0 # Unit extends Any
    .quad 0 # Int extends Any
    .quad 0 # String extends Any
    .quad 0 # Boolean extends Any
    .quad 0 # ArrayAny extends Any
    .quad 0 # IO extends Any
    .quad 6 # QuickSort extends IO
    .quad 0 # Main extends Any
QuickSort_vtable:
    .quad Any.abort 
    .quad IO.out_string 
    .quad IO.out_int 
    .quad IO.out_nl 
    .quad IO.in_string 
    .quad IO.in_int 
    .quad QuickSort.quicksort 
    .quad QuickSort.partition 
    .quad QuickSort.array_swap 
    .quad QuickSort.out_array 
Main_vtable:
    .quad Any.abort 
    .quad -1
QuickSort_proto_obj:
    .quad 7 # tag
    .quad 3 # size in quads
    .quad QuickSort_vtable
    .quad -1
Main_proto_obj:
    .quad 8 # tag
    .quad 3 # size in quads
    .quad Main_vtable

    .text
QuickSort..ctor:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $64, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    # save callee-saved registers
    movq %rbx, -24(%rbp)
    movq %r12, -32(%rbp)
    movq %r13, -40(%rbp)
    movq %r14, -48(%rbp)
    movq %r15, -56(%rbp)
    # begin body
    # super dispatch IO..ctor
    pushq %r10
    pushq %r11
    subq 8, %rsp
    # actual 0 is 'this'
    movq -8(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    # remove actuals loaded into registers from stack
    addq 8, %rsp
    call IO..ctor
    movq %rax, %rbx # store return value
    popq %r11
    popq %r10
    # new ArrayAny
    pushq %r10
    pushq %r11
    subq 16, %rsp
    # actual 0 is 'this'
    # make a copy of the prototype object
    movq $ArrayAny_proto_obj, %rdi
    pushq %r10
    pushq %r11
    call .Runtime.copy_object
    movq %rax, %rbx
    popq %r11
    popq %r10
    movq %rbx, 0(%rsp)
    # actual 0
    movq $int_const_1, %rbx
    movq %rbx, 8(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    # remove actuals loaded into registers from stack
    addq 16, %rsp
    call ArrayAny..ctor
    movq %rax, %rbx # store return value
    popq %r11
    popq %r10
    movq %rbx, -16(%rbp)
    # dispatch ArrayAny.set
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_0 # the receiver is not null
    pushq %r10
    pushq %r11
    movq $str_const_1, %rdi
    movq $49, %rsi
    movq $5, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_0: # the receiver is not null
    subq 24, %rsp
    # actual 0 is 'this'
    movq -16(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # actual 0
    movq $int_const_0, %rbx
    movq %rbx, 8(%rsp)
    # actual 1
    movq $int_const_2, %rbx
    movq %rbx, 16(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    movq 16(%rsp), %rdx
    # remove actuals loaded into registers from stack
    addq 24, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 16(%rbx), %rbx # load the 'set' method's addr
    call *%rbx
    popq %r11
    popq %r10
    movq %rax, %r10 # store return value
    # dispatch ArrayAny.set
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_1 # the receiver is not null
    pushq %r10
    pushq %r11
    movq $str_const_1, %rdi
    movq $50, %rsi
    movq $5, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_1: # the receiver is not null
    subq 24, %rsp
    # actual 0 is 'this'
    movq -16(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # actual 0
    movq $int_const_3, %rbx
    movq %rbx, 8(%rsp)
    # actual 1
    movq $int_const_4, %rbx
    movq %rbx, 16(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    movq 16(%rsp), %rdx
    # remove actuals loaded into registers from stack
    addq 24, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 16(%rbx), %rbx # load the 'set' method's addr
    call *%rbx
    popq %r11
    popq %r10
    movq %rax, %r10 # store return value
    # dispatch ArrayAny.set
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_2 # the receiver is not null
    pushq %r10
    pushq %r11
    movq $str_const_1, %rdi
    movq $51, %rsi
    movq $5, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_2: # the receiver is not null
    subq 24, %rsp
    # actual 0 is 'this'
    movq -16(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # actual 0
    movq $int_const_5, %rbx
    movq %rbx, 8(%rsp)
    # actual 1
    movq $int_const_6, %rbx
    movq %rbx, 16(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    movq 16(%rsp), %rdx
    # remove actuals loaded into registers from stack
    addq 24, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 16(%rbx), %rbx # load the 'set' method's addr
    call *%rbx
    popq %r11
    popq %r10
    movq %rax, %r10 # store return value
    # dispatch ArrayAny.set
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_3 # the receiver is not null
    pushq %r10
    pushq %r11
    movq $str_const_1, %rdi
    movq $52, %rsi
    movq $5, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_3: # the receiver is not null
    subq 24, %rsp
    # actual 0 is 'this'
    movq -16(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # actual 0
    movq $int_const_7, %rbx
    movq %rbx, 8(%rsp)
    # actual 1
    movq $int_const_8, %rbx
    movq %rbx, 16(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    movq 16(%rsp), %rdx
    # remove actuals loaded into registers from stack
    addq 24, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 16(%rbx), %rbx # load the 'set' method's addr
    call *%rbx
    popq %r11
    popq %r10
    movq %rax, %r10 # store return value
    # dispatch ArrayAny.set
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_4 # the receiver is not null
    pushq %r10
    pushq %r11
    movq $str_const_1, %rdi
    movq $53, %rsi
    movq $5, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_4: # the receiver is not null
    subq 24, %rsp
    # actual 0 is 'this'
    movq -16(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # actual 0
    movq $int_const_9, %rbx
    movq %rbx, 8(%rsp)
    # actual 1
    movq $int_const_10, %rbx
    movq %rbx, 16(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    movq 16(%rsp), %rdx
    # remove actuals loaded into registers from stack
    addq 24, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 16(%rbx), %rbx # load the 'set' method's addr
    call *%rbx
    popq %r11
    popq %r10
    movq %rax, %r10 # store return value
    # dispatch QuickSort.out_array
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_5 # the receiver is not null
    pushq %r10
    pushq %r11
    movq $str_const_1, %rdi
    movq $1, %rsi
    movq $1, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_5: # the receiver is not null
    subq 16, %rsp
    # actual 0 is 'this'
    movq -8(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # actual 0
    movq -16(%rbp), %rbx
    movq %rbx, 8(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    # remove actuals loaded into registers from stack
    addq 16, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 80(%rbx), %rbx # load the 'out_array' method's addr
    call *%rbx
    popq %r11
    popq %r10
    movq %rax, %r10 # store return value
    # dispatch QuickSort.quicksort
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_6 # the receiver is not null
    pushq %r10
    pushq %r11
    movq $str_const_1, %rdi
    movq $1, %rsi
    movq $1, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_6: # the receiver is not null
    subq 32, %rsp
    # actual 0 is 'this'
    movq -8(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # actual 0
    movq -16(%rbp), %rbx
    movq %rbx, 8(%rsp)
    # actual 1
    movq $int_const_0, %rbx
    movq %rbx, 16(%rsp)
    # actual 2
    # subtract
    # dispatch ArrayAny.length
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_7 # the receiver is not null
    pushq %r10
    pushq %r11
    movq $str_const_1, %rdi
    movq $57, %rsi
    movq $25, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_7: # the receiver is not null
    subq 8, %rsp
    # actual 0 is 'this'
    movq -16(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    # remove actuals loaded into registers from stack
    addq 8, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 24(%rbx), %rbx # load the 'length' method's addr
    call *%rbx
    popq %r11
    popq %r10
    movq %rax, %r10 # store return value
    movq $int_const_3, %rbx
    subq %rbx, %r10
    movq %r10, %r11
    movq %r11, 24(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    movq 16(%rsp), %rdx
    movq 24(%rsp), %rcx
    # remove actuals loaded into registers from stack
    addq 32, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 56(%rbx), %rbx # load the 'quicksort' method's addr
    call *%rbx
    popq %r11
    popq %r10
    movq %rax, %r10 # store return value
    # dispatch QuickSort.out_array
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_8 # the receiver is not null
    pushq %r10
    pushq %r11
    movq $str_const_1, %rdi
    movq $1, %rsi
    movq $1, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_8: # the receiver is not null
    subq 16, %rsp
    # actual 0 is 'this'
    movq -8(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # actual 0
    movq -16(%rbp), %rbx
    movq %rbx, 8(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    # remove actuals loaded into registers from stack
    addq 16, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 80(%rbx), %rbx # load the 'out_array' method's addr
    call *%rbx
    popq %r11
    popq %r10
    movq %rax, %r10 # store return value
    movq %rbx, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
QuickSort.quicksort:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $80, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    movq %rdx, -24(%rbp)
    movq %rcx, -32(%rbp)
    movq %r8, -40(%rbp)
    # save callee-saved registers
    movq %rbx, -48(%rbp)
    movq %r12, -56(%rbp)
    movq %r13, -64(%rbp)
    movq %r14, -72(%rbp)
    movq %r15, -80(%rbp)
    # begin body
    # cmp op / if_expr
    movq -24(%rbp), %rbx
    movq -32(%rbp), %r10
    movq 24(%rbx), %rbx
    movq 24(%r10), %r10
    cmpq %rbx, %r10
    jl .label_12
    # false / else
    movq $Unit_value, %rbx
    movq %rbx, %r11
    jmp .label_13
.label_12: # true / then
    # dispatch QuickSort.partition
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_9 # the receiver is not null
    pushq %r10
    pushq %r11
    movq $str_const_1, %rdi
    movq $1, %rsi
    movq $1, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_9: # the receiver is not null
    subq 32, %rsp
    # actual 0 is 'this'
    movq -8(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # actual 0
    movq -16(%rbp), %rbx
    movq %rbx, 8(%rsp)
    # actual 1
    movq -24(%rbp), %rbx
    movq %rbx, 16(%rsp)
    # actual 2
    movq -32(%rbp), %rbx
    movq %rbx, 24(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    movq 16(%rsp), %rdx
    movq 24(%rsp), %rcx
    # remove actuals loaded into registers from stack
    addq 32, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 64(%rbx), %rbx # load the 'partition' method's addr
    call *%rbx
    popq %r11
    popq %r10
    movq %rax, %r10 # store return value
    movq %r10, -40(%rbp)
    # dispatch QuickSort.quicksort
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_10 # the receiver is not null
    pushq %r10
    pushq %r11
    movq $str_const_1, %rdi
    movq $1, %rsi
    movq $1, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_10: # the receiver is not null
    subq 32, %rsp
    # actual 0 is 'this'
    movq -8(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # actual 0
    movq -16(%rbp), %rbx
    movq %rbx, 8(%rsp)
    # actual 1
    movq -24(%rbp), %rbx
    movq %rbx, 16(%rsp)
    # actual 2
    # subtract
    movq -40(%rbp), %rbx
    movq $int_const_3, %r10
    subq %r10, %rbx
    movq %rbx, %r11
    movq %r11, 24(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    movq 16(%rsp), %rdx
    movq 24(%rsp), %rcx
    # remove actuals loaded into registers from stack
    addq 32, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 56(%rbx), %rbx # load the 'quicksort' method's addr
    call *%rbx
    popq %r11
    popq %r10
    movq %rax, %r10 # store return value
    # dispatch QuickSort.quicksort
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_11 # the receiver is not null
    pushq %r10
    pushq %r11
    movq $str_const_1, %rdi
    movq $1, %rsi
    movq $1, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_11: # the receiver is not null
    subq 32, %rsp
    # actual 0 is 'this'
    movq -8(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # actual 0
    movq -16(%rbp), %rbx
    movq %rbx, 8(%rsp)
    # actual 1
    # add / concatenate
    movq -40(%rbp), %rbx
    movq $int_const_3, %r10
    addq %rbx, %r10
    movq %r10, %r11
    movq %r11, 16(%rsp)
    # actual 2
    movq -32(%rbp), %rbx
    movq %rbx, 24(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    movq 16(%rsp), %rdx
    movq 24(%rsp), %rcx
    # remove actuals loaded into registers from stack
    addq 32, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 56(%rbx), %rbx # load the 'quicksort' method's addr
    call *%rbx
    popq %r11
    popq %r10
    movq %rax, %r10 # store return value
    movq %r10, %r11
.label_13: # end cmp op / if_expr
    movq %r11, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
QuickSort.partition:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $112, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    movq %rdx, -24(%rbp)
    movq %rcx, -32(%rbp)
    movq %r8, -40(%rbp)
    # save callee-saved registers
    movq %rbx, -80(%rbp)
    movq %r12, -88(%rbp)
    movq %r13, -96(%rbp)
    movq %r14, -104(%rbp)
    movq %r15, -112(%rbp)
    # begin body
    # match
    # dispatch ArrayAny.get
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_14 # the receiver is not null
    pushq %r10
    pushq %r11
    movq $str_const_1, %rdi
    movq $13, %rsi
    movq $22, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_14: # the receiver is not null
    subq 16, %rsp
    # actual 0 is 'this'
    movq -16(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # actual 0
    movq -24(%rbp), %rbx
    movq %rbx, 8(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    # remove actuals loaded into registers from stack
    addq 16, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 8(%rbx), %rbx # load the 'get' method's addr
    call *%rbx
    popq %r11
    popq %r10
    movq %rax, %r10 # store return value
    # handle 'null'
    cmpq $0, %r10
    jne .label_16 # try match
    pushq %r10
    pushq %r11
    movq $str_const_1, %rdi
    movq $13, %rsi
    movq $27, %rdx
    movq %r10, %rcx
    call .Runtime.abort_match
    popq %r11
    popq %r10
    # prepare
    movq %r10, -40(%rbp) # store the expression's value
    movq $0, %rbx
.label_16: # try match
    cmpq $-1, %rbx
    jne .label_16 # try match
    pushq %r10
    pushq %r11
    movq $str_const_1, %rdi
    movq $13, %rsi
    movq $27, %rdx
    movq %r10, %rcx
    call .Runtime.abort_match
    popq %r11
    popq %r10
    cmpq $2, %rbx # Int
    je .label_15
    salq $3, %rbx # multiply by 8
    addq $class_parent_table, %rbx
    movq (%rbx), %rbx
    jmp .label_16 # try match
    # case Int
.label_15:
    movq -48(%rbp), %r10
    movq %r10, %rbx
    jmp .label_17 # end match
.label_17: # end match
    movq %rbx, -40(%rbp)
    movq -24(%rbp), %rbx
    movq %rbx, -56(%rbp)
    # add / concatenate
    movq -24(%rbp), %rbx
    movq $int_const_3, %r10
    addq %rbx, %r10
    movq %r10, %r11
    movq %r11, -64(%rbp)
    # while
.label_27: # condition
    # cmp op / if_expr
    movq -64(%rbp), %rbx
    movq -32(%rbp), %r10
    movq 24(%rbx), %rbx
    movq 24(%r10), %r10
    cmpq %rbx, %r10
    jle .label_18
    # false / else
    movq $Boolean_false, %r11
    jmp .label_19
.label_18: # true / then
    movq $Boolean_true, %r11
.label_19: # end cmp op / if_expr
    cmpq $0, 24(%r11)
    je .label_28
    # body
    # cmp op / if_expr
    # match
    # dispatch ArrayAny.get
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_21 # the receiver is not null
    pushq %r10
    pushq %r11
    movq $str_const_1, %rdi
    movq $17, %rsi
    movq $13, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_21: # the receiver is not null
    subq 16, %rsp
    # actual 0 is 'this'
    movq -16(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # actual 0
    movq -64(%rbp), %rbx
    movq %rbx, 8(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    # remove actuals loaded into registers from stack
    addq 16, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 8(%rbx), %rbx # load the 'get' method's addr
    call *%rbx
    popq %r11
    popq %r10
    movq %rax, %r10 # store return value
    # handle 'null'
    cmpq $0, %r10
    jne .label_23 # try match
    pushq %r10
    pushq %r11
    movq $str_const_1, %rdi
    movq $17, %rsi
    movq $12, %rdx
    movq %r10, %rcx
    call .Runtime.abort_match
    popq %r11
    popq %r10
    # prepare
    movq %r10, -64(%rbp) # store the expression's value
    movq $0, %rbx
.label_23: # try match
    cmpq $-1, %rbx
    jne .label_23 # try match
    pushq %r10
    pushq %r11
    movq $str_const_1, %rdi
    movq $17, %rsi
    movq $12, %rdx
    movq %r10, %rcx
    call .Runtime.abort_match
    popq %r11
    popq %r10
    cmpq $2, %rbx # Int
    je .label_22
    salq $3, %rbx # multiply by 8
    addq $class_parent_table, %rbx
    movq (%rbx), %rbx
    jmp .label_23 # try match
    # case Int
.label_22:
    movq -72(%rbp), %r10
    movq %r10, %rbx
    jmp .label_24 # end match
.label_24: # end match
    movq -40(%rbp), %r10
    movq 24(%rbx), %rbx
    movq 24(%r10), %r10
    cmpq %rbx, %r10
    jle .label_25
    # false / else
    movq $Unit_value, %rbx
    movq %rbx, %r11
    jmp .label_26
.label_25: # true / then
    # dispatch QuickSort.array_swap
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_20 # the receiver is not null
    pushq %r10
    pushq %r11
    movq $str_const_1, %rdi
    movq $1, %rsi
    movq $1, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_20: # the receiver is not null
    subq 32, %rsp
    # actual 0 is 'this'
    movq -8(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # actual 0
    movq -16(%rbp), %rbx
    movq %rbx, 8(%rsp)
    # actual 1
    movq -64(%rbp), %rbx
    movq %rbx, 16(%rsp)
    # actual 2
    # add / concatenate
    movq -56(%rbp), %rbx
    movq $int_const_3, %r10
    addq %rbx, %r10
    movq %r10, %r11
    movq %r11, -56(%rbp)
    movq -56(%rbp), %rbx
    movq %rbx, 24(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    movq 16(%rsp), %rdx
    movq 24(%rsp), %rcx
    # remove actuals loaded into registers from stack
    addq 32, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 72(%rbx), %rbx # load the 'array_swap' method's addr
    call *%rbx
    popq %r11
    popq %r10
    movq %rax, %r10 # store return value
    movq %r10, %r11
.label_26: # end cmp op / if_expr
    # add / concatenate
    movq -64(%rbp), %rbx
    movq $int_const_3, %r10
    addq %rbx, %r10
    movq %r10, %r11
    movq %r11, -64(%rbp)
    jmp .label_27
.label_28: # end while
    movq $Unit_value, %rbx
    # dispatch QuickSort.array_swap
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_29 # the receiver is not null
    pushq %r10
    pushq %r11
    movq $str_const_1, %rdi
    movq $1, %rsi
    movq $1, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_29: # the receiver is not null
    subq 32, %rsp
    # actual 0 is 'this'
    movq -8(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # actual 0
    movq -16(%rbp), %rbx
    movq %rbx, 8(%rsp)
    # actual 1
    movq -56(%rbp), %rbx
    movq %rbx, 16(%rsp)
    # actual 2
    movq -24(%rbp), %rbx
    movq %rbx, 24(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    movq 16(%rsp), %rdx
    movq 24(%rsp), %rcx
    # remove actuals loaded into registers from stack
    addq 32, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 72(%rbx), %rbx # load the 'array_swap' method's addr
    call *%rbx
    popq %r11
    popq %r10
    movq %rax, %r10 # store return value
    movq -56(%rbp), %rbx
    movq %rbx, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
QuickSort.array_swap:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $80, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    movq %rdx, -24(%rbp)
    movq %rcx, -32(%rbp)
    movq %r8, -40(%rbp)
    # save callee-saved registers
    movq %rbx, -48(%rbp)
    movq %r12, -56(%rbp)
    movq %r13, -64(%rbp)
    movq %r14, -72(%rbp)
    movq %r15, -80(%rbp)
    # begin body
    # dispatch ArrayAny.get
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_30 # the receiver is not null
    pushq %r10
    pushq %r11
    movq $str_const_1, %rdi
    movq $29, %rsi
    movq $20, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_30: # the receiver is not null
    subq 16, %rsp
    # actual 0 is 'this'
    movq -16(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # actual 0
    movq -24(%rbp), %rbx
    movq %rbx, 8(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    # remove actuals loaded into registers from stack
    addq 16, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 8(%rbx), %rbx # load the 'get' method's addr
    call *%rbx
    popq %r11
    popq %r10
    movq %rax, %r10 # store return value
    movq %r10, -40(%rbp)
    # dispatch ArrayAny.set
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_31 # the receiver is not null
    pushq %r10
    pushq %r11
    movq $str_const_1, %rdi
    movq $30, %rsi
    movq $5, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_31: # the receiver is not null
    subq 24, %rsp
    # actual 0 is 'this'
    movq -16(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # actual 0
    movq -24(%rbp), %rbx
    movq %rbx, 8(%rsp)
    # actual 1
    # dispatch ArrayAny.get
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_32 # the receiver is not null
    pushq %r10
    pushq %r11
    movq $str_const_1, %rdi
    movq $30, %rsi
    movq $18, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_32: # the receiver is not null
    subq 16, %rsp
    # actual 0 is 'this'
    movq -16(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # actual 0
    movq -32(%rbp), %rbx
    movq %rbx, 8(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    # remove actuals loaded into registers from stack
    addq 16, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 8(%rbx), %rbx # load the 'get' method's addr
    call *%rbx
    popq %r11
    popq %r10
    movq %rax, %r10 # store return value
    movq %r10, 16(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    movq 16(%rsp), %rdx
    # remove actuals loaded into registers from stack
    addq 24, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 16(%rbx), %rbx # load the 'set' method's addr
    call *%rbx
    popq %r11
    popq %r10
    movq %rax, %r10 # store return value
    # dispatch ArrayAny.set
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_33 # the receiver is not null
    pushq %r10
    pushq %r11
    movq $str_const_1, %rdi
    movq $31, %rsi
    movq $5, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_33: # the receiver is not null
    subq 24, %rsp
    # actual 0 is 'this'
    movq -16(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # actual 0
    movq -32(%rbp), %rbx
    movq %rbx, 8(%rsp)
    # actual 1
    movq -40(%rbp), %rbx
    movq %rbx, 16(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    movq 16(%rsp), %rdx
    # remove actuals loaded into registers from stack
    addq 24, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 16(%rbx), %rbx # load the 'set' method's addr
    call *%rbx
    popq %r11
    popq %r10
    movq %rax, %r10 # store return value
    movq %r10, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
QuickSort.out_array:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $80, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    movq %rdx, -24(%rbp)
    # save callee-saved registers
    movq %rbx, -40(%rbp)
    movq %r12, -48(%rbp)
    movq %r13, -56(%rbp)
    movq %r14, -64(%rbp)
    movq %r15, -72(%rbp)
    # begin body
    movq $int_const_0, %rbx
    movq %rbx, -24(%rbp)
    # while
.label_43: # condition
    # cmp op / if_expr
    movq -24(%rbp), %rbx
    # dispatch ArrayAny.length
    pushq %r10
    pushq %r11
    cmpq $0, %r10
    jne .label_34 # the receiver is not null
    pushq %r10
    pushq %r11
    movq $str_const_1, %rdi
    movq $36, %rsi
    movq $16, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_34: # the receiver is not null
    subq 8, %rsp
    # actual 0 is 'this'
    movq -16(%rbp), %r10
    movq %r10, 0(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    # remove actuals loaded into registers from stack
    addq 8, %rsp
    movq 16(%r10), %r10 # load vtable
    movq 24(%r10), %r10 # load the 'length' method's addr
    call *%r10
    popq %r11
    popq %r10
    movq %rax, %r11 # store return value
    movq 24(%rbx), %rbx
    movq 24(%r11), %r11
    cmpq %rbx, %r11
    jl .label_35
    # false / else
    movq $Boolean_false, %r10
    jmp .label_36
.label_35: # true / then
    movq $Boolean_true, %r10
.label_36: # end cmp op / if_expr
    cmpq $0, 24(%r10)
    je .label_44
    # body
    # match
    # dispatch ArrayAny.get
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_37 # the receiver is not null
    pushq %r10
    pushq %r11
    movq $str_const_1, %rdi
    movq $37, %rsi
    movq $7, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_37: # the receiver is not null
    subq 16, %rsp
    # actual 0 is 'this'
    movq -16(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # actual 0
    movq -24(%rbp), %rbx
    movq %rbx, 8(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    # remove actuals loaded into registers from stack
    addq 16, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 8(%rbx), %rbx # load the 'get' method's addr
    call *%rbx
    popq %r11
    popq %r10
    movq %rax, %r10 # store return value
    # handle 'null'
    cmpq $0, %r10
    jne .label_39 # try match
    pushq %r10
    pushq %r11
    movq $str_const_1, %rdi
    movq $37, %rsi
    movq $12, %rdx
    movq %r10, %rcx
    call .Runtime.abort_match
    popq %r11
    popq %r10
    # prepare
    movq %r10, -24(%rbp) # store the expression's value
    movq $0, %rbx
.label_39: # try match
    cmpq $-1, %rbx
    jne .label_39 # try match
    pushq %r10
    pushq %r11
    movq $str_const_1, %rdi
    movq $37, %rsi
    movq $12, %rdx
    movq %r10, %rcx
    call .Runtime.abort_match
    popq %r11
    popq %r10
    cmpq $2, %rbx # Int
    je .label_38
    salq $3, %rbx # multiply by 8
    addq $class_parent_table, %rbx
    movq (%rbx), %rbx
    jmp .label_39 # try match
    # case Int
.label_38:
    # dispatch QuickSort.out_int
    pushq %r10
    pushq %r11
    cmpq $0, %r10
    jne .label_41 # the receiver is not null
    pushq %r10
    pushq %r11
    movq $str_const_1, %rdi
    movq $1, %rsi
    movq $1, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_41: # the receiver is not null
    subq 16, %rsp
    # actual 0 is 'this'
    movq -8(%rbp), %r10
    movq %r10, 0(%rsp)
    # actual 0
    movq -32(%rbp), %r10
    movq %r10, 8(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    # remove actuals loaded into registers from stack
    addq 16, %rsp
    movq 16(%r10), %r10 # load vtable
    movq 16(%r10), %r10 # load the 'out_int' method's addr
    call *%r10
    popq %r11
    popq %r10
    movq %rax, %r11 # store return value
    # dispatch QuickSort.out_string
    pushq %r10
    pushq %r11
    cmpq $0, %r10
    jne .label_42 # the receiver is not null
    pushq %r10
    pushq %r11
    movq $str_const_1, %rdi
    movq $1, %rsi
    movq $1, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_42: # the receiver is not null
    subq 16, %rsp
    # actual 0 is 'this'
    movq -8(%rbp), %r10
    movq %r10, 0(%rsp)
    # actual 0
    movq $str_const_2, %r10

    movq %r10, 8(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    # remove actuals loaded into registers from stack
    addq 16, %rsp
    movq 16(%r10), %r10 # load vtable
    movq 8(%r10), %r10 # load the 'out_string' method's addr
    call *%r10
    popq %r11
    popq %r10
    movq %rax, %r11 # store return value
    movq %r11, %rbx
    jmp .label_40 # end match
.label_40: # end match
    # add / concatenate
    movq -24(%rbp), %rbx
    movq $int_const_3, %r10
    addq %rbx, %r10
    movq %r10, %r11
    movq %r11, -24(%rbp)
    jmp .label_43
.label_44: # end while
    movq $Unit_value, %rbx
    # dispatch QuickSort.out_nl
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_45 # the receiver is not null
    pushq %r10
    pushq %r11
    movq $str_const_1, %rdi
    movq $1, %rsi
    movq $1, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_45: # the receiver is not null
    subq 8, %rsp
    # actual 0 is 'this'
    movq -8(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    # remove actuals loaded into registers from stack
    addq 8, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 24(%rbx), %rbx # load the 'out_nl' method's addr
    call *%rbx
    popq %r11
    popq %r10
    movq %rax, %r10 # store return value
    movq %r10, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
Main..ctor:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $48, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    # save callee-saved registers
    movq %rbx, -16(%rbp)
    movq %r12, -24(%rbp)
    movq %r13, -32(%rbp)
    movq %r14, -40(%rbp)
    movq %r15, -48(%rbp)
    # begin body
    # super dispatch Any..ctor
    pushq %r10
    pushq %r11
    subq 8, %rsp
    # actual 0 is 'this'
    movq -8(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    # remove actuals loaded into registers from stack
    addq 8, %rsp
    call Any..ctor
    movq %rax, %rbx # store return value
    popq %r11
    popq %r10
    # new QuickSort
    pushq %r10
    pushq %r11
    subq 8, %rsp
    # actual 0 is 'this'
    # make a copy of the prototype object
    movq $QuickSort_proto_obj, %rdi
    pushq %r10
    pushq %r11
    call .Runtime.copy_object
    movq %rax, %rbx
    popq %r11
    popq %r10
    movq %rbx, 0(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    # remove actuals loaded into registers from stack
    addq 8, %rsp
    call QuickSort..ctor
    movq %rax, %rbx # store return value
    popq %r11
    popq %r10
    movq %rbx, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
