    .data
    .global class_name_table
    .global Main_proto_obj

    .quad -1
str_const_0:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_0 # length = 0
    # ''
    .byte 0 # terminator
    .zero 7 # payload's size in bytes = 25, pad to an 8 byte boundary
    .quad -1
str_const_1:
    .quad 3 # tag
    .quad 9 # size in quads
    .quad String_vtable
    .quad int_const_6 # length = 46
    # '../../../CoolPrograms/Valid/InsertionSort.cool'
    .byte 46, 46, 47, 46, 46, 47, 46, 46, 47, 67, 111, 111, 108, 80, 114, 111, 103, 114, 97, 109, 115, 47, 86, 97, 108, 105, 100, 47, 73, 110, 115, 101, 114, 116, 105, 111, 110, 83, 111, 114, 116, 46, 99, 111, 111, 108
    .byte 0 # terminator
    .zero 1 # payload's size in bytes = 71, pad to an 8 byte boundary
    .quad -1
str_const_2:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_7 # length = 1
    # ' '
    .byte 32
    .byte 0 # terminator
    .zero 6 # payload's size in bytes = 26, pad to an 8 byte boundary
    .quad -1
str_const_3:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_8 # length = 3
    # 'Any'
    .byte 65, 110, 121
    .byte 0 # terminator
    .zero 4 # payload's size in bytes = 28, pad to an 8 byte boundary
    .quad -1
str_const_4:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_9 # length = 4
    # 'Unit'
    .byte 85, 110, 105, 116
    .byte 0 # terminator
    .zero 3 # payload's size in bytes = 29, pad to an 8 byte boundary
    .quad -1
str_const_5:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_8 # length = 3
    # 'Int'
    .byte 73, 110, 116
    .byte 0 # terminator
    .zero 4 # payload's size in bytes = 28, pad to an 8 byte boundary
    .quad -1
str_const_6:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_10 # length = 6
    # 'String'
    .byte 83, 116, 114, 105, 110, 103
    .byte 0 # terminator
    .zero 1 # payload's size in bytes = 31, pad to an 8 byte boundary
    .quad -1
str_const_7:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_11 # length = 7
    # 'Boolean'
    .byte 66, 111, 111, 108, 101, 97, 110
    .byte 0 # terminator
    .quad -1
str_const_8:
    .quad 3 # tag
    .quad 5 # size in quads
    .quad String_vtable
    .quad int_const_12 # length = 8
    # 'ArrayAny'
    .byte 65, 114, 114, 97, 121, 65, 110, 121
    .byte 0 # terminator
    .zero 7 # payload's size in bytes = 33, pad to an 8 byte boundary
    .quad -1
str_const_9:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_13 # length = 2
    # 'IO'
    .byte 73, 79
    .byte 0 # terminator
    .zero 5 # payload's size in bytes = 27, pad to an 8 byte boundary
    .quad -1
str_const_10:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_9 # length = 4
    # 'List'
    .byte 76, 105, 115, 116
    .byte 0 # terminator
    .zero 3 # payload's size in bytes = 29, pad to an 8 byte boundary
    .quad -1
str_const_11:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_8 # length = 3
    # 'Nil'
    .byte 78, 105, 108
    .byte 0 # terminator
    .zero 4 # payload's size in bytes = 28, pad to an 8 byte boundary
    .quad -1
str_const_12:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_9 # length = 4
    # 'Cons'
    .byte 67, 111, 110, 115
    .byte 0 # terminator
    .zero 3 # payload's size in bytes = 29, pad to an 8 byte boundary
    .quad -1
str_const_13:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_9 # length = 4
    # 'Main'
    .byte 77, 97, 105, 110
    .byte 0 # terminator
    .zero 3 # payload's size in bytes = 29, pad to an 8 byte boundary
    .quad -1
int_const_0:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 0 # value
    .quad -1
int_const_1:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 30 # value
    .quad -1
int_const_2:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 20 # value
    .quad -1
int_const_3:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 50 # value
    .quad -1
int_const_4:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 40 # value
    .quad -1
int_const_5:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 10 # value
    .quad -1
int_const_6:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 46 # value
    .quad -1
int_const_7:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 1 # value
    .quad -1
int_const_8:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 3 # value
    .quad -1
int_const_9:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 4 # value
    .quad -1
int_const_10:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 6 # value
    .quad -1
int_const_11:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 7 # value
    .quad -1
int_const_12:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 8 # value
    .quad -1
int_const_13:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 2 # value
class_name_table:
    .quad str_const_3 # Any
    .quad str_const_4 # Unit
    .quad str_const_5 # Int
    .quad str_const_6 # String
    .quad str_const_7 # Boolean
    .quad str_const_8 # ArrayAny
    .quad str_const_9 # IO
    .quad str_const_10 # List
    .quad str_const_11 # Nil
    .quad str_const_12 # Cons
    .quad str_const_13 # Main
class_parent_table:
    .quad -1 # Any
    .quad 0 # Unit extends Any
    .quad 0 # Int extends Any
    .quad 0 # String extends Any
    .quad 0 # Boolean extends Any
    .quad 0 # ArrayAny extends Any
    .quad 0 # IO extends Any
    .quad 0 # List extends Any
    .quad 7 # Nil extends List
    .quad 7 # Cons extends List
    .quad 6 # Main extends IO
List_vtable:
    .quad Any.abort 
    .quad List.isNil 
    .quad List.head 
    .quad List.tail 
Nil_vtable:
    .quad Any.abort 
    .quad Nil.isNil # overrides
    .quad List.head 
    .quad List.tail 
Cons_vtable:
    .quad Any.abort 
    .quad Cons.isNil # overrides
    .quad Cons.head # overrides
    .quad Cons.tail # overrides
Main_vtable:
    .quad Any.abort 
    .quad IO.out_string 
    .quad IO.out_int 
    .quad IO.out_nl 
    .quad IO.in_string 
    .quad IO.in_int 
    .quad Main.insert 
    .quad Main.sort 
    .quad Main.out_list 
    .quad -1
List_proto_obj:
    .quad 7 # tag
    .quad 3 # size in quads
    .quad List_vtable
    .quad -1
Nil_proto_obj:
    .quad 8 # tag
    .quad 3 # size in quads
    .quad Nil_vtable
    .quad -1
Cons_proto_obj:
    .quad 9 # tag
    .quad 5 # size in quads
    .quad Cons_vtable
    .quad int_const_0 # car
    .quad 0 # cdr
    .quad -1
Main_proto_obj:
    .quad 10 # tag
    .quad 3 # size in quads
    .quad Main_vtable

    .text
List..ctor:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $48, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    # save callee-saved registers
    movq %rbx, -16(%rbp)
    movq %r12, -24(%rbp)
    movq %r13, -32(%rbp)
    movq %r14, -40(%rbp)
    movq %r15, -48(%rbp)
    # begin body
    # super dispatch Any..ctor
    pushq %r10
    pushq %r11
    subq 8, %rsp
    # actual 0 is 'this'
    movq -8(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    # remove actuals loaded into registers from stack
    addq 8, %rsp
    call Any..ctor
    movq %rax, %rbx # store return value
    popq %r11
    popq %r10
    movq %rbx, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
List.isNil:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $48, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    # save callee-saved registers
    movq %rbx, -16(%rbp)
    movq %r12, -24(%rbp)
    movq %r13, -32(%rbp)
    movq %r14, -40(%rbp)
    movq %r15, -48(%rbp)
    # begin body
    # dispatch List.abort
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_0
    pushq %r10
    pushq %r11
    movq str_const_1, %rdi
    movq 1, %rsi
    movq 1, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_0: # the receiver is not null
    subq 8, %rsp
    # actual 0 is 'this'
    movq -8(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    # remove actuals loaded into registers from stack
    addq 8, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 0(%rbx), %rbx # load method addr
    call *%rbx
    movq %rax, %r10 # store return value
    popq %r11
    popq %r10
    movq %r10, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
List.head:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $48, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    # save callee-saved registers
    movq %rbx, -16(%rbp)
    movq %r12, -24(%rbp)
    movq %r13, -32(%rbp)
    movq %r14, -40(%rbp)
    movq %r15, -48(%rbp)
    # begin body
    # dispatch List.abort
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_1
    pushq %r10
    pushq %r11
    movq str_const_1, %rdi
    movq 1, %rsi
    movq 1, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_1: # the receiver is not null
    subq 8, %rsp
    # actual 0 is 'this'
    movq -8(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    # remove actuals loaded into registers from stack
    addq 8, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 0(%rbx), %rbx # load method addr
    call *%rbx
    movq %rax, %r10 # store return value
    popq %r11
    popq %r10
    movq %r10, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
List.tail:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $48, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    # save callee-saved registers
    movq %rbx, -16(%rbp)
    movq %r12, -24(%rbp)
    movq %r13, -32(%rbp)
    movq %r14, -40(%rbp)
    movq %r15, -48(%rbp)
    # begin body
    # dispatch List.abort
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_2
    pushq %r10
    pushq %r11
    movq str_const_1, %rdi
    movq 1, %rsi
    movq 1, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_2: # the receiver is not null
    subq 8, %rsp
    # actual 0 is 'this'
    movq -8(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    # remove actuals loaded into registers from stack
    addq 8, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 0(%rbx), %rbx # load method addr
    call *%rbx
    movq %rax, %r10 # store return value
    popq %r11
    popq %r10
    movq %r10, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
Nil..ctor:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $48, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    # save callee-saved registers
    movq %rbx, -16(%rbp)
    movq %r12, -24(%rbp)
    movq %r13, -32(%rbp)
    movq %r14, -40(%rbp)
    movq %r15, -48(%rbp)
    # begin body
    # super dispatch List..ctor
    pushq %r10
    pushq %r11
    subq 8, %rsp
    # actual 0 is 'this'
    movq -8(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    # remove actuals loaded into registers from stack
    addq 8, %rsp
    call Any..ctor
    movq %rax, %rbx # store return value
    popq %r11
    popq %r10
    movq %rbx, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
Nil.isNil:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $48, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    # save callee-saved registers
    movq %rbx, -16(%rbp)
    movq %r12, -24(%rbp)
    movq %r13, -32(%rbp)
    movq %r14, -40(%rbp)
    movq %r15, -48(%rbp)
    # begin body
    movq $Boolean_true, %rbx

    movq %rbx, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
Cons..ctor:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $64, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    movq %rdx, -24(%rbp)
    movq %rcx, -32(%rbp)
    # save callee-saved registers
    movq %rbx, -32(%rbp)
    movq %r12, -40(%rbp)
    movq %r13, -48(%rbp)
    movq %r14, -56(%rbp)
    movq %r15, -64(%rbp)
    # begin body
    # super dispatch List..ctor
    pushq %r10
    pushq %r11
    subq 8, %rsp
    # actual 0 is 'this'
    movq -8(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    # remove actuals loaded into registers from stack
    addq 8, %rsp
    call Any..ctor
    movq %rax, %rbx # store return value
    popq %r11
    popq %r10
    movq -16(%rbp), %rbx
    movq -8(%rbp), %r10

    movq %rbx, 192(%r10)
    movq -24(%rbp), %rbx
    movq -8(%rbp), %r10

    movq %rbx, 200(%r10)
    movq %rbx, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
Cons.isNil:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $48, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    # save callee-saved registers
    movq %rbx, -16(%rbp)
    movq %r12, -24(%rbp)
    movq %r13, -32(%rbp)
    movq %r14, -40(%rbp)
    movq %r15, -48(%rbp)
    # begin body
    movq $Boolean_false, %rbx

    movq %rbx, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
Cons.head:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $48, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    # save callee-saved registers
    movq %rbx, -16(%rbp)
    movq %r12, -24(%rbp)
    movq %r13, -32(%rbp)
    movq %r14, -40(%rbp)
    movq %r15, -48(%rbp)
    # begin body
    movq -8(%rbp), %rbx
    movq 192(%rbx), %r10
    movq %r10, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
Cons.tail:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $48, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    # save callee-saved registers
    movq %rbx, -16(%rbp)
    movq %r12, -24(%rbp)
    movq %r13, -32(%rbp)
    movq %r14, -40(%rbp)
    movq %r15, -48(%rbp)
    # begin body
    movq -8(%rbp), %rbx
    movq 200(%rbx), %r10
    movq %r10, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
Main..ctor:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $64, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    # save callee-saved registers
    movq %rbx, -24(%rbp)
    movq %r12, -32(%rbp)
    movq %r13, -40(%rbp)
    movq %r14, -48(%rbp)
    movq %r15, -56(%rbp)
    # begin body
    # super dispatch IO..ctor
    pushq %r10
    pushq %r11
    subq 8, %rsp
    # actual 0 is 'this'
    movq -8(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    # remove actuals loaded into registers from stack
    addq 8, %rsp
    call IO..ctor
    movq %rax, %rbx # store return value
    popq %r11
    popq %r10
    # new Cons
    pushq %r10
    pushq %r11
    subq 24, %rsp
    # actual 0 is 'this'
    # make a copy of the prototype object
    movq $Cons_proto_obj, %rdi
    pushq %r10
    pushq %r11
    call .Runtime.copy_object
    movq %rax, %rbx
    popq %r11
    popq %r10
    movq %rbx, 0(%rsp)
    # actual 0
    movq $int_const_1, %rbx
    movq %rbx, 8(%rsp)
    # actual 1
    # new Cons
    pushq %r10
    pushq %r11
    subq 24, %rsp
    # actual 0 is 'this'
    # make a copy of the prototype object
    movq $Cons_proto_obj, %rdi
    pushq %r10
    pushq %r11
    call .Runtime.copy_object
    movq %rax, %rbx
    popq %r11
    popq %r10
    movq %rbx, 0(%rsp)
    # actual 0
    movq $int_const_2, %rbx
    movq %rbx, 8(%rsp)
    # actual 1
    # new Cons
    pushq %r10
    pushq %r11
    subq 24, %rsp
    # actual 0 is 'this'
    # make a copy of the prototype object
    movq $Cons_proto_obj, %rdi
    pushq %r10
    pushq %r11
    call .Runtime.copy_object
    movq %rax, %rbx
    popq %r11
    popq %r10
    movq %rbx, 0(%rsp)
    # actual 0
    movq $int_const_3, %rbx
    movq %rbx, 8(%rsp)
    # actual 1
    # new Cons
    pushq %r10
    pushq %r11
    subq 24, %rsp
    # actual 0 is 'this'
    # make a copy of the prototype object
    movq $Cons_proto_obj, %rdi
    pushq %r10
    pushq %r11
    call .Runtime.copy_object
    movq %rax, %rbx
    popq %r11
    popq %r10
    movq %rbx, 0(%rsp)
    # actual 0
    movq $int_const_4, %rbx
    movq %rbx, 8(%rsp)
    # actual 1
    # new Cons
    pushq %r10
    pushq %r11
    subq 24, %rsp
    # actual 0 is 'this'
    # make a copy of the prototype object
    movq $Cons_proto_obj, %rdi
    pushq %r10
    pushq %r11
    call .Runtime.copy_object
    movq %rax, %rbx
    popq %r11
    popq %r10
    movq %rbx, 0(%rsp)
    # actual 0
    movq $int_const_5, %rbx
    movq %rbx, 8(%rsp)
    # actual 1
    # new Nil
    pushq %r10
    pushq %r11
    subq 8, %rsp
    # actual 0 is 'this'
    # make a copy of the prototype object
    movq $Nil_proto_obj, %rdi
    pushq %r10
    pushq %r11
    call .Runtime.copy_object
    movq %rax, %rbx
    popq %r11
    popq %r10
    movq %rbx, 0(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    # remove actuals loaded into registers from stack
    addq 8, %rsp
    call Nil..ctor
    movq %rax, %rbx # store return value
    popq %r11
    popq %r10
    movq %rbx, 16(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    movq 16(%rsp), %rdx
    # remove actuals loaded into registers from stack
    addq 24, %rsp
    call Cons..ctor
    movq %rax, %rbx # store return value
    popq %r11
    popq %r10
    movq %rbx, 16(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    movq 16(%rsp), %rdx
    # remove actuals loaded into registers from stack
    addq 24, %rsp
    call Cons..ctor
    movq %rax, %rbx # store return value
    popq %r11
    popq %r10
    movq %rbx, 16(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    movq 16(%rsp), %rdx
    # remove actuals loaded into registers from stack
    addq 24, %rsp
    call Cons..ctor
    movq %rax, %rbx # store return value
    popq %r11
    popq %r10
    movq %rbx, 16(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    movq 16(%rsp), %rdx
    # remove actuals loaded into registers from stack
    addq 24, %rsp
    call Cons..ctor
    movq %rax, %rbx # store return value
    popq %r11
    popq %r10
    movq %rbx, 16(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    movq 16(%rsp), %rdx
    # remove actuals loaded into registers from stack
    addq 24, %rsp
    call Cons..ctor
    movq %rax, %rbx # store return value
    popq %r11
    popq %r10
    movq %rbx, -16(%rbp)
    # dispatch Main.out_list
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_3
    pushq %r10
    pushq %r11
    movq str_const_1, %rdi
    movq 1, %rsi
    movq 1, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_3: # the receiver is not null
    subq 16, %rsp
    # actual 0 is 'this'
    movq -8(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # actual 0
    movq -16(%rbp), %rbx
    movq %rbx, 8(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    # remove actuals loaded into registers from stack
    addq 16, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 72(%rbx), %rbx # load method addr
    call *%rbx
    movq %rax, %r10 # store return value
    popq %r11
    popq %r10
    # dispatch Main.out_list
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_4
    pushq %r10
    pushq %r11
    movq str_const_1, %rdi
    movq 1, %rsi
    movq 1, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_4: # the receiver is not null
    subq 16, %rsp
    # actual 0 is 'this'
    movq -8(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # actual 0
    # dispatch Main.sort
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_5
    pushq %r10
    pushq %r11
    movq str_const_1, %rdi
    movq 1, %rsi
    movq 1, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_5: # the receiver is not null
    subq 16, %rsp
    # actual 0 is 'this'
    movq -8(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # actual 0
    movq -16(%rbp), %rbx
    movq %rbx, 8(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    # remove actuals loaded into registers from stack
    addq 16, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 64(%rbx), %rbx # load method addr
    call *%rbx
    movq %rax, %r10 # store return value
    popq %r11
    popq %r10
    movq %r10, 8(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    # remove actuals loaded into registers from stack
    addq 16, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 72(%rbx), %rbx # load method addr
    call *%rbx
    movq %rax, %r10 # store return value
    popq %r11
    popq %r10
    movq %rbx, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
Main.insert:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $64, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    movq %rdx, -24(%rbp)
    movq %rcx, -32(%rbp)
    # save callee-saved registers
    movq %rbx, -32(%rbp)
    movq %r12, -40(%rbp)
    movq %r13, -48(%rbp)
    movq %r14, -56(%rbp)
    movq %r15, -64(%rbp)
    # begin body
    # if_expr
    # dispatch List.isNil
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_12
    pushq %r10
    pushq %r11
    movq str_const_1, %rdi
    movq 21, %rsi
    movq 13, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_12: # the receiver is not null
    subq 8, %rsp
    # actual 0 is 'this'
    movq -16(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    # remove actuals loaded into registers from stack
    addq 8, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 16(%rbx), %rbx # load method addr
    call *%rbx
    movq %rax, %r11 # store return value
    popq %r11
    popq %r10
    cmpq $0, 24(%r11)
    je .label_13
    # then
    # new Cons
    pushq %r10
    pushq %r11
    subq 24, %rsp
    # actual 0 is 'this'
    # make a copy of the prototype object
    movq $Cons_proto_obj, %rdi
    pushq %r10
    pushq %r11
    call .Runtime.copy_object
    movq %rax, %rbx
    popq %r11
    popq %r10
    movq %rbx, 0(%rsp)
    # actual 0
    movq -24(%rbp), %rbx
    movq %rbx, 8(%rsp)
    # actual 1
    movq -16(%rbp), %rbx
    movq %rbx, 16(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    movq 16(%rsp), %rdx
    # remove actuals loaded into registers from stack
    addq 24, %rsp
    call Cons..ctor
    movq %rax, %rbx # store return value
    popq %r11
    popq %r10
    movq %rbx, %r10
    jmp .label_14
.label_13: # else

    # cmp op / if
    movq -24(%rbp), %r10
    # dispatch List.head
    pushq %r10
    pushq %r11
    cmpq $0, %r11
    jne .label_9
    pushq %r10
    pushq %r11
    movq str_const_1, %rdi
    movq 23, %rsi
    movq 23, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_9: # the receiver is not null
    subq 8, %rsp
    # actual 0 is 'this'
    movq -16(%rbp), %r11
    movq %r11, 0(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    # remove actuals loaded into registers from stack
    addq 8, %rsp
    movq 16(%r11), %r11 # load vtable
    movq 24(%r11), %r11 # load method addr
    call *%r11
    movq %rax, %r13 # store return value
    popq %r11
    popq %r10
    movq 24(%r10), %r10
    movq 24(%r13), %r13
    cmpq %r10, %r13
    jle .label_10
    # false / else
    # new Cons
    pushq %r10
    pushq %r11
    subq 24, %rsp
    # actual 0 is 'this'
    # make a copy of the prototype object
    movq $Cons_proto_obj, %rdi
    pushq %r10
    pushq %r11
    call .Runtime.copy_object
    movq %rax, %r11
    popq %r11
    popq %r10
    movq %r11, 0(%rsp)
    # actual 0
    # dispatch List.head
    pushq %r10
    pushq %r11
    cmpq $0, %r11
    jne .label_6
    pushq %r10
    pushq %r11
    movq str_const_1, %rdi
    movq 26, %rsi
    movq 22, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_6: # the receiver is not null
    subq 8, %rsp
    # actual 0 is 'this'
    movq -16(%rbp), %r11
    movq %r11, 0(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    # remove actuals loaded into registers from stack
    addq 8, %rsp
    movq 16(%r11), %r11 # load vtable
    movq 24(%r11), %r11 # load method addr
    call *%r11
    movq %rax, %r12 # store return value
    popq %r11
    popq %r10
    movq %r12, 8(%rsp)
    # actual 1
    # dispatch Main.insert
    pushq %r10
    pushq %r11
    cmpq $0, %r11
    jne .label_7
    pushq %r10
    pushq %r11
    movq str_const_1, %rdi
    movq 1, %rsi
    movq 1, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_7: # the receiver is not null
    subq 24, %rsp
    # actual 0 is 'this'
    movq -8(%rbp), %r11
    movq %r11, 0(%rsp)
    # actual 0
    # dispatch List.tail
    pushq %r10
    pushq %r11
    cmpq $0, %r11
    jne .label_8
    pushq %r10
    pushq %r11
    movq str_const_1, %rdi
    movq 26, %rsi
    movq 41, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_8: # the receiver is not null
    subq 8, %rsp
    # actual 0 is 'this'
    movq -16(%rbp), %r11
    movq %r11, 0(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    # remove actuals loaded into registers from stack
    addq 8, %rsp
    movq 16(%r11), %r11 # load vtable
    movq 32(%r11), %r11 # load method addr
    call *%r11
    movq %rax, %r12 # store return value
    popq %r11
    popq %r10
    movq %r12, 8(%rsp)
    # actual 1
    movq -24(%rbp), %r11
    movq %r11, 16(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    movq 16(%rsp), %rdx
    # remove actuals loaded into registers from stack
    addq 24, %rsp
    movq 16(%r11), %r11 # load vtable
    movq 56(%r11), %r11 # load method addr
    call *%r11
    movq %rax, %r12 # store return value
    popq %r11
    popq %r10
    movq %r12, 16(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    movq 16(%rsp), %rdx
    # remove actuals loaded into registers from stack
    addq 24, %rsp
    call Cons..ctor
    movq %rax, %r11 # store return value
    popq %r11
    popq %r10
    movq %r11, %r12
    jmp .label_11
.label_10: # true / then
    # new Cons
    pushq %r10
    pushq %r11
    subq 24, %rsp
    # actual 0 is 'this'
    # make a copy of the prototype object
    movq $Cons_proto_obj, %rdi
    pushq %r10
    pushq %r11
    call .Runtime.copy_object
    movq %rax, %r10
    popq %r11
    popq %r10
    movq %r10, 0(%rsp)
    # actual 0
    movq -24(%rbp), %r10
    movq %r10, 8(%rsp)
    # actual 1
    movq -16(%rbp), %r10
    movq %r10, 16(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    movq 16(%rsp), %rdx
    # remove actuals loaded into registers from stack
    addq 24, %rsp
    call Cons..ctor
    movq %rax, %r10 # store return value
    popq %r11
    popq %r10
    movq %r10, %r12
.label_11: # done
    movq %r12, %r10
.label_14: # done
    movq %r10, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
Main.sort:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $64, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    movq %rdx, -24(%rbp)
    # save callee-saved registers
    movq %rbx, -24(%rbp)
    movq %r12, -32(%rbp)
    movq %r13, -40(%rbp)
    movq %r14, -48(%rbp)
    movq %r15, -56(%rbp)
    # begin body
    # if_expr
    # dispatch List.isNil
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_19
    pushq %r10
    pushq %r11
    movq str_const_1, %rdi
    movq 29, %rsi
    movq 13, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_19: # the receiver is not null
    subq 8, %rsp
    # actual 0 is 'this'
    movq -16(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    # remove actuals loaded into registers from stack
    addq 8, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 16(%rbx), %rbx # load method addr
    call *%rbx
    movq %rax, %r11 # store return value
    popq %r11
    popq %r10
    cmpq $0, 24(%r11)
    je .label_20
    # then
    movq -16(%rbp), %rbx
    movq %rbx, %r10
    jmp .label_21
.label_20: # else
    # dispatch Main.insert
    pushq %r10
    pushq %r11
    cmpq $0, %r10
    jne .label_15
    pushq %r10
    pushq %r11
    movq str_const_1, %rdi
    movq 1, %rsi
    movq 1, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_15: # the receiver is not null
    subq 24, %rsp
    # actual 0 is 'this'
    movq -8(%rbp), %r10
    movq %r10, 0(%rsp)
    # actual 0
    # dispatch Main.sort
    pushq %r10
    pushq %r11
    cmpq $0, %r10
    jne .label_16
    pushq %r10
    pushq %r11
    movq str_const_1, %rdi
    movq 1, %rsi
    movq 1, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_16: # the receiver is not null
    subq 16, %rsp
    # actual 0 is 'this'
    movq -8(%rbp), %r10
    movq %r10, 0(%rsp)
    # actual 0
    # dispatch List.tail
    pushq %r10
    pushq %r11
    cmpq $0, %r10
    jne .label_17
    pushq %r10
    pushq %r11
    movq str_const_1, %rdi
    movq 32, %rsi
    movq 25, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_17: # the receiver is not null
    subq 8, %rsp
    # actual 0 is 'this'
    movq -16(%rbp), %r10
    movq %r10, 0(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    # remove actuals loaded into registers from stack
    addq 8, %rsp
    movq 16(%r10), %r10 # load vtable
    movq 32(%r10), %r10 # load method addr
    call *%r10
    movq %rax, %r11 # store return value
    popq %r11
    popq %r10
    movq %r11, 8(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    # remove actuals loaded into registers from stack
    addq 16, %rsp
    movq 16(%r10), %r10 # load vtable
    movq 64(%r10), %r10 # load method addr
    call *%r10
    movq %rax, %r11 # store return value
    popq %r11
    popq %r10
    movq %r11, 8(%rsp)
    # actual 1
    # dispatch List.head
    pushq %r10
    pushq %r11
    cmpq $0, %r10
    jne .label_18
    pushq %r10
    pushq %r11
    movq str_const_1, %rdi
    movq 32, %rsi
    movq 38, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_18: # the receiver is not null
    subq 8, %rsp
    # actual 0 is 'this'
    movq -16(%rbp), %r10
    movq %r10, 0(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    # remove actuals loaded into registers from stack
    addq 8, %rsp
    movq 16(%r10), %r10 # load vtable
    movq 24(%r10), %r10 # load method addr
    call *%r10
    movq %rax, %r11 # store return value
    popq %r11
    popq %r10
    movq %r11, 16(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    movq 16(%rsp), %rdx
    # remove actuals loaded into registers from stack
    addq 24, %rsp
    movq 16(%r10), %r10 # load vtable
    movq 56(%r10), %r10 # load method addr
    call *%r10
    movq %rax, %r11 # store return value
    popq %r11
    popq %r10
    movq %r11, %r10
.label_21: # done
    movq %r10, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
Main.out_list:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $64, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    movq %rdx, -24(%rbp)
    # save callee-saved registers
    movq %rbx, -24(%rbp)
    movq %r12, -32(%rbp)
    movq %r13, -40(%rbp)
    movq %r14, -48(%rbp)
    movq %r15, -56(%rbp)
    # begin body
    # if_expr
    # dispatch List.isNil
    pushq %r10
    pushq %r11
    cmpq $0, %r10
    jne .label_28
    pushq %r10
    pushq %r11
    movq str_const_1, %rdi
    movq 35, %rsi
    movq 13, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_28: # the receiver is not null
    subq 8, %rsp
    # actual 0 is 'this'
    movq -16(%rbp), %r10
    movq %r10, 0(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    # remove actuals loaded into registers from stack
    addq 8, %rsp
    movq 16(%r10), %r10 # load vtable
    movq 16(%r10), %r10 # load method addr
    call *%r10
    movq %rax, %r11 # store return value
    popq %r11
    popq %r10
    cmpq $0, 24(%r11)
    je .label_29
    # then
    # dispatch Main.out_nl
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_22
    pushq %r10
    pushq %r11
    movq str_const_1, %rdi
    movq 1, %rsi
    movq 1, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_22: # the receiver is not null
    subq 8, %rsp
    # actual 0 is 'this'
    movq -8(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    # remove actuals loaded into registers from stack
    addq 8, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 24(%rbx), %rbx # load method addr
    call *%rbx
    movq %rax, %r10 # store return value
    popq %r11
    popq %r10
    movq %r10, %rbx
    jmp .label_30
.label_29: # else
    # dispatch Main.out_int
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_23
    pushq %r10
    pushq %r11
    movq str_const_1, %rdi
    movq 1, %rsi
    movq 1, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_23: # the receiver is not null
    subq 16, %rsp
    # actual 0 is 'this'
    movq -8(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # actual 0
    # dispatch List.head
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_24
    pushq %r10
    pushq %r11
    movq str_const_1, %rdi
    movq 38, %rsi
    movq 21, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_24: # the receiver is not null
    subq 8, %rsp
    # actual 0 is 'this'
    movq -16(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    # remove actuals loaded into registers from stack
    addq 8, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 24(%rbx), %rbx # load method addr
    call *%rbx
    movq %rax, %r11 # store return value
    popq %r11
    popq %r10
    movq %r11, 8(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    # remove actuals loaded into registers from stack
    addq 16, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 16(%rbx), %rbx # load method addr
    call *%rbx
    movq %rax, %r11 # store return value
    popq %r11
    popq %r10
    # dispatch Main.out_string
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_25
    pushq %r10
    pushq %r11
    movq str_const_1, %rdi
    movq 1, %rsi
    movq 1, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_25: # the receiver is not null
    subq 16, %rsp
    # actual 0 is 'this'
    movq -8(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # actual 0
    movq $str_const_2, %rbx

    movq %rbx, 8(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    # remove actuals loaded into registers from stack
    addq 16, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 8(%rbx), %rbx # load method addr
    call *%rbx
    movq %rax, %r11 # store return value
    popq %r11
    popq %r10
    # dispatch Main.out_list
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_26
    pushq %r10
    pushq %r11
    movq str_const_1, %rdi
    movq 1, %rsi
    movq 1, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_26: # the receiver is not null
    subq 16, %rsp
    # actual 0 is 'this'
    movq -8(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # actual 0
    # dispatch List.tail
    pushq %r10
    pushq %r11
    cmpq $0, %rbx
    jne .label_27
    pushq %r10
    pushq %r11
    movq str_const_1, %rdi
    movq 40, %rsi
    movq 22, %rdx
    call .Runtime.abort_dispatch
    popq %r11
    popq %r10
.label_27: # the receiver is not null
    subq 8, %rsp
    # actual 0 is 'this'
    movq -16(%rbp), %rbx
    movq %rbx, 0(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    # remove actuals loaded into registers from stack
    addq 8, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 32(%rbx), %rbx # load method addr
    call *%rbx
    movq %rax, %r11 # store return value
    popq %r11
    popq %r10
    movq %r11, 8(%rsp)
    # load first 6 actuals into registers
    movq 0(%rsp), %rdi
    movq 8(%rsp), %rsi
    # remove actuals loaded into registers from stack
    addq 16, %rsp
    movq 16(%rbx), %rbx # load vtable
    movq 72(%rbx), %rbx # load method addr
    call *%rbx
    movq %rax, %r11 # store return value
    popq %r11
    popq %r10
    movq %r11, %rbx
.label_30: # done
    movq %rbx, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
