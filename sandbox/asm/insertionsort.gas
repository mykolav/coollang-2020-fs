    .data
    .global class_name_table
    .global Main_proto_obj

    .quad -1
str_const_0:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_0 # length = 0
    # ''
    .byte 0 # terminator
    .zero 7 # payload's size in bytes = 25, pad to an 8 byte boundary
    .quad -1
str_const_1:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_6 # length = 1
    # ' '
    .byte 32
    .byte 0 # terminator
    .zero 6 # payload's size in bytes = 26, pad to an 8 byte boundary
    .quad -1
str_const_2:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_7 # length = 3
    # 'Any'
    .byte 65, 110, 121
    .byte 0 # terminator
    .zero 4 # payload's size in bytes = 28, pad to an 8 byte boundary
    .quad -1
str_const_3:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_8 # length = 4
    # 'Unit'
    .byte 85, 110, 105, 116
    .byte 0 # terminator
    .zero 3 # payload's size in bytes = 29, pad to an 8 byte boundary
    .quad -1
str_const_4:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_7 # length = 3
    # 'Int'
    .byte 73, 110, 116
    .byte 0 # terminator
    .zero 4 # payload's size in bytes = 28, pad to an 8 byte boundary
    .quad -1
str_const_5:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_9 # length = 6
    # 'String'
    .byte 83, 116, 114, 105, 110, 103
    .byte 0 # terminator
    .zero 1 # payload's size in bytes = 31, pad to an 8 byte boundary
    .quad -1
str_const_6:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_10 # length = 7
    # 'Boolean'
    .byte 66, 111, 111, 108, 101, 97, 110
    .byte 0 # terminator
    .quad -1
str_const_7:
    .quad 3 # tag
    .quad 5 # size in quads
    .quad String_vtable
    .quad int_const_11 # length = 8
    # 'ArrayAny'
    .byte 65, 114, 114, 97, 121, 65, 110, 121
    .byte 0 # terminator
    .zero 7 # payload's size in bytes = 33, pad to an 8 byte boundary
    .quad -1
str_const_8:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_12 # length = 2
    # 'IO'
    .byte 73, 79
    .byte 0 # terminator
    .zero 5 # payload's size in bytes = 27, pad to an 8 byte boundary
    .quad -1
str_const_9:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_8 # length = 4
    # 'List'
    .byte 76, 105, 115, 116
    .byte 0 # terminator
    .zero 3 # payload's size in bytes = 29, pad to an 8 byte boundary
    .quad -1
str_const_10:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_7 # length = 3
    # 'Nil'
    .byte 78, 105, 108
    .byte 0 # terminator
    .zero 4 # payload's size in bytes = 28, pad to an 8 byte boundary
    .quad -1
str_const_11:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_8 # length = 4
    # 'Cons'
    .byte 67, 111, 110, 115
    .byte 0 # terminator
    .zero 3 # payload's size in bytes = 29, pad to an 8 byte boundary
    .quad -1
str_const_12:
    .quad 3 # tag
    .quad 4 # size in quads
    .quad String_vtable
    .quad int_const_8 # length = 4
    # 'Main'
    .byte 77, 97, 105, 110
    .byte 0 # terminator
    .zero 3 # payload's size in bytes = 29, pad to an 8 byte boundary
    .quad -1
int_const_0:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 0 # value
    .quad -1
int_const_1:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 30 # value
    .quad -1
int_const_2:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 20 # value
    .quad -1
int_const_3:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 50 # value
    .quad -1
int_const_4:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 40 # value
    .quad -1
int_const_5:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 10 # value
    .quad -1
int_const_6:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 1 # value
    .quad -1
int_const_7:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 3 # value
    .quad -1
int_const_8:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 4 # value
    .quad -1
int_const_9:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 6 # value
    .quad -1
int_const_10:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 7 # value
    .quad -1
int_const_11:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 8 # value
    .quad -1
int_const_12:
    .quad 2 # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 2 # value
class_name_table:
    .quad str_const_2 # Any
    .quad str_const_3 # Unit
    .quad str_const_4 # Int
    .quad str_const_5 # String
    .quad str_const_6 # Boolean
    .quad str_const_7 # ArrayAny
    .quad str_const_8 # IO
    .quad str_const_9 # List
    .quad str_const_10 # Nil
    .quad str_const_11 # Cons
    .quad str_const_12 # Main
class_parent_table:
    .quad -1 # Any
    .quad 0 # Unit extends Any
    .quad 0 # Int extends Any
    .quad 0 # String extends Any
    .quad 0 # Boolean extends Any
    .quad 0 # ArrayAny extends Any
    .quad 0 # IO extends Any
    .quad 0 # List extends Any
    .quad 7 # Nil extends List
    .quad 7 # Cons extends List
    .quad 6 # Main extends IO
List_vtable:
    .quad Any.abort # overrides? no
    .quad List.isNil # overrides? no
    .quad List.head # overrides? no
    .quad List.tail # overrides? no
Nil_vtable:
    .quad Any.abort # overrides? no
    .quad Nil.isNil # overrides? yes
    .quad List.head # overrides? no
    .quad List.tail # overrides? no
Cons_vtable:
    .quad Any.abort # overrides? no
    .quad Cons.isNil # overrides? yes
    .quad Cons.head # overrides? yes
    .quad Cons.tail # overrides? yes
Main_vtable:
    .quad Any.abort # overrides? no
    .quad IO.out_string # overrides? no
    .quad IO.out_int # overrides? no
    .quad IO.out_nl # overrides? no
    .quad IO.in_string # overrides? no
    .quad IO.in_int # overrides? no
    .quad Main.insert # overrides? no
    .quad Main.sort # overrides? no
    .quad Main.out_list # overrides? no
    .quad -1
List_proto_obj:
    .quad 7 # tag
    .quad 3 # size in quads
    .quad List_vtable
    .quad -1
Nil_proto_obj:
    .quad 8 # tag
    .quad 3 # size in quads
    .quad Nil_vtable
    .quad -1
Cons_proto_obj:
    .quad 9 # tag
    .quad 5 # size in quads
    .quad Cons_vtable
    .quad int_const_0 # car
    .quad 0 # cdr
    .quad -1
Main_proto_obj:
    .quad 10 # tag
    .quad 3 # size in quads
    .quad Main_vtable

    .text
List..ctor:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $48, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    # save callee-saved registers
    movq %rbx, -16(%rbp)
    movq %r12, -24(%rbp)
    movq %r13, -32(%rbp)
    movq %r14, -40(%rbp)
    movq %r15, -48(%rbp)
    # begin body
    movq %rbx, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
List.isNil:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $48, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    # save callee-saved registers
    movq %rbx, -16(%rbp)
    movq %r12, -24(%rbp)
    movq %r13, -32(%rbp)
    movq %r14, -40(%rbp)
    movq %r15, -48(%rbp)
    # begin body
    movq $0, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
List.head:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $48, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    # save callee-saved registers
    movq %rbx, -16(%rbp)
    movq %r12, -24(%rbp)
    movq %r13, -32(%rbp)
    movq %r14, -40(%rbp)
    movq %r15, -48(%rbp)
    # begin body
    movq $0, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
List.tail:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $48, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    # save callee-saved registers
    movq %rbx, -16(%rbp)
    movq %r12, -24(%rbp)
    movq %r13, -32(%rbp)
    movq %r14, -40(%rbp)
    movq %r15, -48(%rbp)
    # begin body
    movq $0, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
Nil..ctor:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $48, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    # save callee-saved registers
    movq %rbx, -16(%rbp)
    movq %r12, -24(%rbp)
    movq %r13, -32(%rbp)
    movq %r14, -40(%rbp)
    movq %r15, -48(%rbp)
    # begin body
    movq %rbx, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
Nil.isNil:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $48, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    # save callee-saved registers
    movq %rbx, -16(%rbp)
    movq %r12, -24(%rbp)
    movq %r13, -32(%rbp)
    movq %r14, -40(%rbp)
    movq %r15, -48(%rbp)
    # begin body
    movq $Boolean_true, %rbx
    movq %rbx, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
Cons..ctor:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $64, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    movq %rdx, -24(%rbp)
    movq %rcx, -32(%rbp)
    # save callee-saved registers
    movq %rbx, -32(%rbp)
    movq %r12, -40(%rbp)
    movq %r13, -48(%rbp)
    movq %r14, -56(%rbp)
    movq %r15, -64(%rbp)
    # begin body
    movq -16(%rbp), %rbx
    movq -8(%rbp), %r10

    movq %rbx, 192(%r10)
    movq -24(%rbp), %rbx
    movq -8(%rbp), %r10

    movq %rbx, 200(%r10)
    movq %rbx, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
Cons.isNil:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $48, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    # save callee-saved registers
    movq %rbx, -16(%rbp)
    movq %r12, -24(%rbp)
    movq %r13, -32(%rbp)
    movq %r14, -40(%rbp)
    movq %r15, -48(%rbp)
    # begin body
    movq $Boolean_false, %rbx
    movq %rbx, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
Cons.head:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $48, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    # save callee-saved registers
    movq %rbx, -16(%rbp)
    movq %r12, -24(%rbp)
    movq %r13, -32(%rbp)
    movq %r14, -40(%rbp)
    movq %r15, -48(%rbp)
    # begin body
    movq -8(%rbp), %rbx
    movq 192(%rbx), %r10
    movq %r10, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
Cons.tail:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $48, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    # save callee-saved registers
    movq %rbx, -16(%rbp)
    movq %r12, -24(%rbp)
    movq %r13, -32(%rbp)
    movq %r14, -40(%rbp)
    movq %r15, -48(%rbp)
    # begin body
    movq -8(%rbp), %rbx
    movq 200(%rbx), %r10
    movq %r10, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
Main..ctor:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $64, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    # save callee-saved registers
    movq %rbx, -24(%rbp)
    movq %r12, -32(%rbp)
    movq %r13, -40(%rbp)
    movq %r14, -48(%rbp)
    movq %r15, -56(%rbp)
    # begin body
    movq , -16(%rbp)
    movq %rbx, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
Main.insert:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $64, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    movq %rdx, -24(%rbp)
    movq %rcx, -32(%rbp)
    # save callee-saved registers
    movq %rbx, -32(%rbp)
    movq %r12, -40(%rbp)
    movq %r13, -48(%rbp)
    movq %r14, -56(%rbp)
    movq %r15, -64(%rbp)
    # begin body
    cmpq $0, 24()
    je .label_2
    # then
    movq , %r10
    jmp .label_3
.label_2: # else
    movq -24(%rbp), %r10
    movq 24(%r10), %r10
    movq 24(), 
    cmpq %r10, 
    jle .label_0
    movq , %rbx
    jmp .label_1
.label_0:
    movq , %rbx
.label_1:
    movq %rbx, %r10
.label_3: # done
    movq %r10, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
Main.sort:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $64, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    movq %rdx, -24(%rbp)
    # save callee-saved registers
    movq %rbx, -24(%rbp)
    movq %r12, -32(%rbp)
    movq %r13, -40(%rbp)
    movq %r14, -48(%rbp)
    movq %r15, -56(%rbp)
    # begin body
    cmpq $0, 24()
    je .label_4
    # then
    movq -16(%rbp), %rbx
    movq %rbx, %r10
    jmp .label_5
.label_4: # else
    movq , %r10
.label_5: # done
    movq %r10, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
Main.out_list:
    pushq %rbp # save the base pointer
    movq %rsp, %rbp # set new base pointer to rsp
    subq $64, %rsp
    # save actuals on the stack
    movq %rdi, -8(%rbp)
    movq %rsi, -16(%rbp)
    movq %rdx, -24(%rbp)
    # save callee-saved registers
    movq %rbx, -24(%rbp)
    movq %r12, -32(%rbp)
    movq %r13, -40(%rbp)
    movq %r14, -48(%rbp)
    movq %r15, -56(%rbp)
    # begin body
    cmpq $0, 24()
    je .label_6
    # then
    movq , %rbx
    jmp .label_7
.label_6: # else
    movq , %rbx
.label_7: # done
    movq %rbx, %rax
    # end body
    # restore callee-saved registers
    popq %r15 
    popq %r14
    popq %r13
    popq %r12
    popq %rbx
    movq %rbp, %rsp # reset stack to base pointer
    popq %rbp # restore the old base pointer
    ret
