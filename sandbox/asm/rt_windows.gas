    .data

########################################
# Virtual tables
########################################
    .global Any_vtable
Any_vtable:
    .quad Any.abort

    .global Unit_vtable
Unit_vtable:
    .quad Any.abort

    .global Int_vtable
Int_vtable:
    .quad Any.abort

    .global String_vtable
String_vtable:
    .quad Any.abort
    .quad String.length
    .quad String.concat
    .quad String.substring

    .global Boolean_vtable
Boolean_vtable:
    .quad Any.abort

    .global ArrayAny_vtable
ArrayAny_vtable:
    .quad Any.abort
    .quad ArrayAny.get
    .quad ArrayAny.set
    .quad ArrayAny.length

    .global IO_vtable
IO_vtable:
    .quad Any.abort
    .quad IO.out_string
    .quad IO.out_int
    .quad IO.out_nl
    .quad IO.in_string
    .quad IO.in_int

    .set Unit_tag, 1
    .set Boolean_tag, 4
    .set ArrayAny_tag, 5
    .set IO_tag, 6

########################################
# Prototype objects
########################################
    .quad -1
    .global Unit_value
Unit_value:
    .quad Unit_tag # tag
    .quad 3 # size in quads
    .quad Unit_vtable
    
    .quad -1
    .global Boolean_true
Boolean_true:
    .quad Boolean_tag # tag
    .quad 4 # size in quads
    .quad Boolean_vtable
    .quad 1

    .quad -1
    .global Boolean_false
Boolean_false:
    .quad Boolean_tag # tag
    .quad 4 # size in quads
    .quad Boolean_vtable
    .quad 0
    
    .quad -1
    .global ArrayAny_prototype_obj
ArrayAny_prototype_obj:
    .quad ArrayAny_tag # tag
    .quad 3 # size in quads
    .quad ArrayAny_vtable
    
    .quad -1
    .global IO_prototype_obj
IO_prototype_obj:
    .quad IO_tag # tag
    .quad 3 # size in quads
    .quad IO_vtable

    .text

########################################
# .Runtime
########################################
    .global .Runtime.abort_dispatch
.Runtime.abort_dispatch:
    ret

    .global .Runtime.abort_match
.Runtime.abort_match:
    ret

    .global .Runtime.type_name
.Runtime.type_name:
    ret

    .global .Runtime.copy_object
.Runtime.copy_object:
    ret

    .global .Runtime.are_equal
.Runtime.are_equal:
    ret

########################################
# Any
########################################
    .global Any..ctor
Any..ctor:
    ret

    .global Any.abort
Any.abort:
    ret

    .global String..ctor
String..ctor:
    ret

    .global String.length
String.length:
    ret

    .global String.concat
String.concat:
    ret

    .global String.substring
String.substring:
    ret

########################################
# ArrayAny
########################################
    .global ArrayAny..ctor
ArrayAny..ctor:
    ret

    .global ArrayAny.get
ArrayAny.get:
    ret

    .global ArrayAny.set
ArrayAny.set:
    ret

    .global ArrayAny.length
ArrayAny.length:
    ret

########################################
# IO
########################################
    .global IO..ctor
IO..ctor:
    ret

    .global IO.out_string
IO.out_string:
    ret

    .global IO.out_int
IO.out_int:
    ret

    .global IO.out_nl
IO.out_nl:
    ret

    .global IO.in_string
IO.in_string:
    ret

    .global IO.in_int
IO.in_int:
    ret

########################################
# Process entry point
########################################
main:
    # A class 'Main' must be present in every Cool2020 program.
    # Create a new instance of 'Main'.
    pushq %r10
    pushq %r11
    movq $Main_proto_obj, %rdi
    call .Runtime.copy_object
    popq %r11
    popq %r10

    # 'Main..ctor' is a Cool2020 program's entry point.
    # Pass a reference to the newly created 'Main' instance in %rdi.
    # Invoke the constructor.
    pushq %r10
    pushq %r11
    movq %rax, %rdi
    call Main..ctor
    popq %r11
    popq %r10
    ret
