class Main() {
  {
    // Initially (see `.GenGC.init`), the entire heap size = .GenGC.HEAP_PAGE = 32_768 bytes
    // Roughly, Work Area is a bit smaller than the half of that = 16_384 bytes.
    // Creating a single `Garbage` object takes up 32 bytes,
    // therefore creating about 512 (16_384 / 32) objects has to 
    // trigger garbage collection at least once.

    // We avoid using the number 512 directly, 
    // to prevent the Int allocations that would result from using it
    // interfering with the test.
    var i: Int = 0;
    while (i < 2) {

      var j: Int = 0;
      while (j < 256) {
        // Create an unreachable object.
        new Garbage();
        GC_print_state();

        j = j + 1
      };

      i = i + 1
    }
  };
}

// Allocating an object of type `Garbage` takes 4 quads (32 bytes):
//  1 quad for the eye catcher
//  3 quads for the object
class Garbage() {
}
