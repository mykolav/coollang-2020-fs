
########################################
# Data
########################################
    .data

########################################
# Strings
########################################
ascii_aborted_from:         .ascii "Aborted from "

ascii_lparen:               .ascii "("
ascii_comma:                .ascii ","
ascii_rparen_colon_space:   .ascii "): "

ascii_dispatch_to_null:     .ascii "Dispatch to null"

ascii_no_match:             .ascii "No match for "
ascii_null:                 .ascii "null"

ascii_array_index:          .ascii "Array index "
ascii_is_out_of_range:      .ascii " is out of range"


    .global ascii_out_of_memory
ascii_out_of_memory:         .ascii "Out of memory"

########################################
# Virtual tables
########################################
    .global Any_vtable
Any_vtable:
    .quad Any.abort

    .global Unit_vtable
Unit_vtable:
    .quad Any.abort

    .global Int_vtable
Int_vtable:
    .quad Any.abort

    .global String_vtable
String_vtable:
    .quad Any.abort
    .quad String.length
    .quad String.concat
    .quad String.substring

    .global Boolean_vtable
Boolean_vtable:
    .quad Any.abort

    .global ArrayAny_vtable
ArrayAny_vtable:
    .quad Any.abort
    .quad ArrayAny.get
    .quad ArrayAny.set
    .quad ArrayAny.length

    .global IO_vtable
IO_vtable:
    .quad Any.abort
    .quad IO.out_string
    .quad IO.out_int
    .quad IO.out_nl
    .quad IO.in_string
    .quad IO.in_int

########################################
# Tags
########################################
    .set Unit_tag, 1
    .set Int_tag, 2
    .set String_tag, 3
    .set Boolean_tag, 4
    .set ArrayAny_tag, 5
    .set IO_tag, 6

########################################
# Prototype objects
########################################
    .quad -1
    .global Int_proto_obj
Int_proto_obj:
    .quad Int_tag # tag
    .quad 4 # size in quads
    .quad Int_vtable
    .quad 0 # value

    .quad -1
    .global Unit_value
Unit_value:
    .quad Unit_tag # tag
    .quad 3 # size in quads
    .quad Unit_vtable
    
    .quad -1
    .global Boolean_true
Boolean_true:
    .quad Boolean_tag # tag
    .quad 4 # size in quads
    .quad Boolean_vtable
    .quad 1 # value

    .quad -1
    .global Boolean_false
Boolean_false:
    .quad Boolean_tag # tag
    .quad 4 # size in quads
    .quad Boolean_vtable
    .quad 0 # value
    
    .quad -1
    .global IO_proto_obj
IO_proto_obj:
    .quad IO_tag # tag
    .quad 3 # size in quads
    .quad IO_vtable

########################################
# Text
########################################
    .text

    .set OBJ_TAG, 0
    .set OBJ_SIZE, 8
    .set OBJ_VTAB, 16
    
    .set STR_LEN, 24
    .set STR_VAL, 32

    .set ARR_LEN, 24
    .set ARR_ITEMS, 32

    .set BOOL_VAL, 24

    .set INT_VAL, 24

########################################
# .Runtime
########################################

#
#  .Runtime.abort_dispatch
#
#      file   in %rdi
#.     line   in %rsi
#      column in %rdx
#  
#  Prints "{file}({line},{column}): Dispatch to null" and exits process.
#  Does not return.
#
    .global .Runtime.abort_dispatch
.Runtime.abort_dispatch:
    # pushq %rbp
    # movq %rsp, %rbp

    # Print "{file}({line},{column}): "
    call    .Runtime.out_location
    # Print "Dispatch to null"
    movq    $ascii_dispatch_to_null, %rdi
    movq    $16, %rsi
    call    .Platform.out_string
    # Print new line
    call    .Runtime.out_nl

    # Exit the process
    call    .Platform.exit_process

#
#  .Runtime.abort_match
#
#      file     %rdi
#.     line     %rsi
#      column   %rdx
#      object   %rcx
#  
#  Prints "{file}({line},{column}): No match for {class}" and exits process.
#  Does not return.
#
    .global .Runtime.abort_match
.Runtime.abort_match:
    pushq %rbp
    movq %rsp, %rbp

    subq    $(8 + 8), %rsp # 16 bytes boundary padding + object
    movq    %rcx, -16(%rbp) # store %rcx, as it's volatile under MS x64

    # Print "{file}({line},{column}): "
    call    .Runtime.out_location
    # Print "No match for "
    movq    $ascii_no_match, %rdi
    movq    $13, %rsi
    call    .Platform.out_string
    # Print "{class}"
    movq    -16(%rbp), %rdi
    call    .Runtime.out_type_name
    # Print new line
    call    .Runtime.out_nl

    # Exit the process
    call    .Platform.exit_process

#
#  .Runtime.abort_array
#
#      index    %rdi
#  
#  Prints "Array index {index} is out of range" and exits process.
#  Does not return.
#
    .global .Runtime.abort_array
.Runtime.abort_array:
    pushq   %rbp
    movq    %rsp, %rbp

    subq    $(8 + 8), %rsp # 16 bytes boundary padding + index
    movq    %rdi, -16(%rbp) # index

    # Print "Array index "
    movq    $ascii_array_index, %rdi
    movq    $12, %rsi
    call    .Platform.out_string
    # Print "{index}"
    movq    -16(%rbp), %rdi # index
    call    .Runtime.out_int
    # Print " is out of range"
    movq    $ascii_is_out_of_range, %rdi
    movq    $16, %rsi
    call    .Platform.out_string
    # Print new line
    call    .Runtime.out_nl

    # Exit the process
    call    .Platform.exit_process

#
#  .Runtime.out_location
#
#      file   in %rdi
#.     line   in %rsi
#      column in %rdx
#  
#  Prints "{file}({line},{column}): ".
#
    .global .Runtime.out_location
.Runtime.out_location:
    pushq %rbp
    movq %rsp, %rbp

    subq    $(8 + 8 + 8 + 8), %rsp # 16 bytes boundary padding +
                                   # file +
                                   #.line + 
                                   # colum

    movq    %rdi, -16(%rbp) # file
    movq    %rsi, -24(%rbp) # line
    movq    %rdx, -32(%rbp) # column
  
    # Print "{file}" 
    movq    -16(%rbp), %rdi # file
    movq    STR_LEN(%rdi), %rsi
    movq    INT_VAL(%rsi), %rsi 
    leaq    STR_VAL(%rdi), %rdi
    call    .Platform.out_string

    # Print "(" 
    movq    $ascii_lparen, %rdi
    movq    $1, %rsi
    call    .Platform.out_string

    # Print "{line}" 
    movq    -24(%rbp), %rdi # line
    call    .Runtime.out_int

    # Print ","
    movq    $ascii_comma, %rdi
    movq    $1, %rsi
    call    .Platform.out_string

    # Print "{column}" 
    movq    -32(%rbp), %rdi # line
    call    .Runtime.out_int

    # Print "): "
    movq    $ascii_rparen_colon_space, %rdi
    movq    $3, %rsi
    call    .Platform.out_string

    movq %rbp, %rsp
    popq %rbp

    ret

#
#  .Runtime.out_type_name
#
#      object   %rdi
#  
#  Prints "{class}" and exits.
#
    .global .Runtime.out_type_name
.Runtime.out_type_name:
    pushq   %rbp
    movq    %rsp, %rbp

    # handle null
    cmpq    $0, %rdi
    jne     .Runtime.out_type_name.is_some

    movq    $ascii_null, %rdi
    movq    $4, %rsi
    jmp     .Runtime.out_type_name.out_string

.Runtime.out_type_name.is_some:
    movq    OBJ_TAG(%rdi), %rdi
    salq    $3, %rdi # multiply the tag by 8
                     # to get the offset in 'class_name_table'
    addq    $class_name_table, %rdi
    movq    (%rdi), %rdi

    movq    STR_LEN(%rdi), %rsi
    movq    INT_VAL(%rsi), %rsi
    leaq    STR_VAL(%rdi), %rdi

.Runtime.out_type_name.out_string:
    call    .Platform.out_string
 
    movq    %rbp, %rsp
    popq    %rbp
 
    ret

#
#  .Runtime.copy_object
#
#      a prototype in %rdi
#  
#  Allocates memory on heap and copies the prototype.
#  Returns a pointer to the copy in %rax.
#
    .global .Runtime.copy_object
.Runtime.copy_object:
    pushq   %rbp
    movq    %rsp, %rbp

    subq    $(8 + 8), %rsp  # 16 bytes boundary padding + prototype
    movq    %rdi, -16(%rbp) # store the prototype

    movq    OBJ_SIZE(%rdi), %rdi # size in quads
    incq    %rdi                 # add a quad for the eyecatch
    call    .Platform.alloc

    movq    $-1, (%rax) # write the eyecatch value
    addq    $8, %rax    # move ptr to the beginning of object

    # %rdi - src
    # %rdx - src_end
    # %rsi - dst
    # %rcx - tmp

    # dst
    movq    %rax, %rsi

    # src
    movq    -16(%rbp), %rdi # prototype

    # src_end
    movq    OBJ_SIZE(%rdi), %rdx
    salq    $3, %rdx
    addq    %rdi, %rdx

    jmp     .Runtime.copy_object.loop_cond

.Runtime.copy_object.loop_body:
    movq    (%rdi), %rcx
    movq    %rcx, (%rsi)
    addq    $8, %rdi
    addq    $8, %rsi

.Runtime.copy_object.loop_cond:
    cmpq    %rdi, %rdx
    jne     .Runtime.copy_object.loop_body

    movq    %rbp, %rsp
    popq    %rbp

    ret

#
#  Polymorphic equality testing function:
#  Two objects are equal if they
#    - are both null (pointer equality)
#    - are identical (pointer equality)
#    - have same tag and are of type BOOL, STRING, INT, UNIT 
#      and contain the same data.
#
#  INPUT: 
#      obj1 in %rdi
#      obj2 in %rsi
#  OUTPUT: 
#      $1 in %rax, if the objects are equal.
#      $0 in %rax, if the objects are unequal.
#
    .global .Runtime.are_equal
.Runtime.are_equal:
    # pushq   %rbp
    # movq    %rsp, %rbp

    # pointer equality
    cmpq    %rdi, %rsi
    je      .Runtime.are_equal.true

    # get tags
    movq    (%rdi), %rdx
    movq    (%rsi), %rcx

    #. if the tags are not equal, the objects are unequal
    cmpq    %rdx, %rcx
    jne     .Runtime.are_equal.false

    cmpq    $Int_tag, %rdx
    je      .Runtime.are_equal.int

    cmpq    $Boolean_tag, %rdx
    je      .Runtime.are_equal.int

    cmpq    $Unit_tag, %rdx
    je      .Runtime.are_equal.unit

    cmpq    $String_tag, %rdx
    jne     .Runtime.are_equal.false    # Not a primitive type, return false

#.Runtime.are_equal.string:
    movq    STR_LEN(%rdi), %rdx
    movq    INT_VAL(%rdx), %rdx
    movq    STR_LEN(%rsi), %rcx
    movq    INT_VAL(%rcx), %rcx
    
    # If strings have different lengths, they cannot be equal
    cmpq    %rdx, %rcx
    jne     .Runtime.are_equal.false
    
    # If both strings' lengths are 0, they are equal
    cmpq    $0, %rdx
    je      .Runtime.are_equal.true

    leaq    STR_VAL(%rdi), %rdi
    leaq    STR_VAL(%rsi), %rsi
    # - %rdx contains strings' length,
    #   we'll use it as a counter of remaining chars to compare
    # - string1's current char ptr will be in %rdi
    #             current char will be in %rcx
    # - string2's current char ptr will be in %rsi
    #             current char will be accessed indirectly

.Runtime.are_equal.cmp_string_content:
    movq    (%rdi), %rcx
    cmpq    %rcx, (%rsi)
    # We found a pair of unequal chars, the strings are unequal
    jne     .Runtime.are_equal.false
    addq    $1, %rdi # move string1's ptr to next char
    addq    $1, %rsi # move string2's ptr to next char
    subq    $1, %rdx # decrease the number of chars remaining to compare
    jnz     .Runtime.are_equal.cmp_string_content
    # We didn't find a pair of unequal chars, the strings are equal
    jmp     .Runtime.are_equal.true

.Runtime.are_equal.int: # Handles int and bool values
    movq    INT_VAL(%rdi), %rdx
    cmpq    %rdx, INT_VAL(%rsi)
    jne      .Runtime.are_equal.false
    # fall through to .Runtime.are_equal.true

.Runtime.are_equal.unit:
    # fall through to .Runtime.are_equal.true

.Runtime.are_equal.true:
    movq    $Boolean_true, %rax
    jmp     .Runtime.are_equal.return

.Runtime.are_equal.false:
    movq    $Boolean_false, %rax

.Runtime.are_equal.return:
    # movq    %rbp, %rsp
    # popq    %rbp

    ret

#
#  .Runtime.out_int
#
#      an int value in %rdi
#
#  Prints out the value of an int object argument.
#
    .global .Runtime.out_int
.Runtime.out_int:
    pushq   %rbp
    movq    %rsp, %rbp

    subq    $16, %rsp
    # -8
    # -12 - digits
    # -16 - 16 bytes boundary padding

    # i            - %rdi
    # is_negative  - %rcx
    # digit_pos    - %rsi

    # Int32.MaxValue = 2147483647 -- (minus sign)? + 10 digits + 0 terminator
    # char digits[12] = { 0 };
    movq    $0, -8(%rbp)
    movl    $0, -12(%rbp)

    xor     %rcx, %rcx
    #. if (is_negative) { i = -i; }
    cmpq    $0, %rdi
    jge     .Runtime.out_int.loop_init

    movq    $1, %rcx # is_negative
    negq    %rdi # i = -i;

.Runtime.out_int.loop_init:
    # digit_pos = 10
    # terminating 0 is at index 11
    movq    $10, %rsi # digit_pos

.Runtime.out_int.loop_body:
    # i = i / 10
    movq    %rdi, %rax # i
    cqto                    # sign-extend %rax to %rdx:%rax
    movq    $10, %r8        # divisor
    idivq   %r8             # quotient is in %rax
                            # remainder is in %rdx

    movq    %rax, %rdi # i

    addq    $48, %rdx           # remainder + '0'
    movb    %dl, -12(%rbp, %rsi) # digits[digit_pos] = remainder + '0'

    decq    %rsi # --digit_pos

    # } while (i > 0);
    cmpq    $0, %rdi # i
    jg      .Runtime.out_int.loop_body

    ## if (is_negative) {
    #     digits[digit_pos] = '-';
    #     --digit_pos;
    # }
    cmpq    $0, %rcx # is_negative
    je      .Runtime.out_int.print
    
    movb    $45, -12(%rbp, %rsi) # digits[digit_pos] = '-';
    decq    %rsi                 # --digit_pos;

.Runtime.out_int.print:
    # digit_pos is pointing to a vacant digit slot, 
    # move it to the leftmost digit (or '-')
    incq    %rsi # digit_pos

    leaq    -12(%rbp, %rsi), %rdi # digits

    movq    $11, %r8
    subq    %rsi, %r8 # 11 - digit_pos
    movq    %r8, %rsi # length

    call    .Platform.out_string

    movq    %rbp, %rsp
    popq    %rbp

    ret

#
#  .Runtime.out_nl
#
#      Doesn't take any params
#
#  Prints out new line according to the platform.
#
    .global .Runtime.out_nl
.Runtime.out_nl:
    movq    $.Platform.ascii_new_line, %rdi
    movq    .Platform.new_line_len, %rsi
    jmp     .Platform.out_string

########################################
# Any
########################################
    .global Any..ctor
Any..ctor:
    movq %rdi, %rax
    ret

#
#  Any.abort
#
#      'this' in %rdi
#  
#  Prints "Aborted from {class}" and exits process.
#  Does not return.
#
    .global Any.abort
Any.abort:
    pushq   %rbp
    movq    %rsp, %rbp

    subq    $(8 + 8), %rsp  # 16 bytes boundary pad + 'this'
    movq    %rdi, -16(%rbp) # 'this'

    # Print "Aborted from " 
    movq    $ascii_aborted_from, %rdi
    movq    $13, %rsi
    call    .Platform.out_string
    # Print "{class}"
    movq    -16(%rbp), %rdi
    call    .Runtime.out_type_name
    # Print new line
    call    .Runtime.out_nl

    # Exit the process
    movq    $0, %rdi
    call    .Platform.exit_process

########################################
# String
########################################
    .global String..ctor
String..ctor:
    movq %rdi, %rax
    ret

    .global String.length
String.length:
    pushq %rbp
    movq %rsp, %rbp

    movq %rbp, %rsp
    popq %rbp

    ret

    .global String.concat
String.concat:
    pushq %rbp
    movq %rsp, %rbp

    movq %rbp, %rsp
    popq %rbp

    ret

    .global String.substring
String.substring:
    pushq %rbp
    movq %rsp, %rbp

    movq %rbp, %rsp
    popq %rbp

    ret

########################################
# ArrayAny
########################################

#
#  ArrayAny..ctor
#
#      'null' in %rdi
#      length in %rsi
#
#  Allocates memory for %rsi elements array.
#  Initializes the array's attributes.
#

    .global ArrayAny..ctor
ArrayAny..ctor:
    pushq   %rbp
    movq    %rsp, %rbp

    subq    $(8 + 8 + 8 + 8), %rsp  # length + 
                                    # size in quads + 
                                    # object ptr + 
                                    # 16 byte boundary padding

    movq    %rsi, -8(%rbp)  # length

    addq    $5, %rsi        # eyecatch + tag + size + vtab + length
    movq    %rsi, -16(%rbp) # size in quads

    movq    %rsi, %rdi      # size in quads
    call    .Platform.alloc

    movq    $-1, (%rax)     # write the eyecatch value
    addq    $8, %rax        # move ptr to the beginning of object

    movq    $ArrayAny_tag, OBJ_TAG(%rax)

    movq    -16(%rbp), %rsi     # size in quads
    movq    %rsi, OBJ_SIZE(%rax)

    movq    $ArrayAny_vtable, OBJ_VTAB(%rax)

    movq    -8(%rbp), %rsi      # length (an int object)
    movq    %rsi, ARR_LEN(%rax)

    # %rdi - current element
    # %rsi - elements end

    movq    INT_VAL(%rsi), %rsi
    salq    $3, %rsi   # length * 8
    leaq    ARR_ITEMS(%rax), %rdi
    addq    %rdi, %rsi # elements end 

    jmp     .ArrayAny..ctor.loop_cond

    # init the array's elements to $0
.ArrayAny..ctor.loop_body:
    movq    $0, (%rdi)
    addq    $8, %rdi

.ArrayAny..ctor.loop_cond:
    cmpq    %rdi, %rsi
    jne     .ArrayAny..ctor.loop_body

    # %rax points to array object

    movq    %rbp, %rsp
    popq    %rbp

    ret

#
#  ArrayAny.get
#
#      array object in %rdi
#      element index (an int object) in %rsi
#
#  Returns value of the array's element with the given index in %rax.
#

    .global ArrayAny.get
ArrayAny.get:
    movq    INT_VAL(%rsi), %rsi

    # Ensure index >= 0
    cmpq    $0, %rsi
    jl      .Runtime.abort_array

    # Ensure index < length
    movq    ARR_LEN(%rdi), %rcx
    movq    INT_VAL(%rcx), %rcx
    cmpq    %rcx, %rsi
    jge     .Runtime.abort_array

    # The index is in range
    addq    $ARR_ITEMS, %rdi # elements ptr
    movq    (%rdi, %rsi, 8), %rax

    ret

#
#  ArrayAny.set
#
#      array object in %rdi
#      element index (an int object) in %rsi
#      value to set in %rdx
#
#  Sets the array's element with the given index to the supplied value.
#

    .global ArrayAny.set
ArrayAny.set:
    movq    INT_VAL(%rsi), %rsi

    # Ensure index >= 0
    cmpq    $0, %rsi
    jl      .Runtime.abort_array

    # Ensure index < length
    movq    ARR_LEN(%rdi), %rcx
    movq    INT_VAL(%rcx), %rcx
    cmpq    %rcx, %rsi
    jge     .Runtime.abort_array

    # The index is in range
    addq    $ARR_ITEMS, %rdi # elements ptr
    movq    %rdx, (%rdi, %rsi, 8)

    ret

#
#  ArrayAny.length
#
#      array object in %rdi
#
#  Returns the array's length (an int object) in %rax.
#

    .global ArrayAny.length
ArrayAny.length:
    movq    ARR_LEN(%rdi), %rax
    ret

########################################
# IO
########################################
    .global IO..ctor
IO..ctor:
    movq %rdi, %rax
    ret

    .global IO.out_string

#
#  IO.out_string
#
#      'this' in %rdi
#      a string object in %rsi
#
#  Prints out the content of a string object argument.
#
IO.out_string:
    leaq    STR_VAL(%rsi), %rdi
    movq    STR_LEN(%rsi), %rsi
    movq    INT_VAL(%rsi), %rsi
    jmp     .Platform.out_string

#
#  IO.out_int
#
#      'this' in %rdi
#      an int object in %rsi
#
#  Prints out the value of an int object argument.
#
    .global IO.out_int
IO.out_int:
    movq    INT_VAL(%rsi), %rdi
    jmp     .Runtime.out_int

#
#  IO.out_nl
#
#      'this' in %rdi
#
#  Prints out "\r\n"
#
    .global IO.out_nl
IO.out_nl:
    jmp    .Runtime.out_nl

    .global IO.in_string
IO.in_string:
    pushq %rbp
    movq %rsp, %rbp

    movq %rbp, %rsp
    popq %rbp

    ret

    .global IO.in_int
IO.in_int:
    pushq %rbp
    movq %rsp, %rbp

    movq %rbp, %rsp
    popq %rbp

    ret

########################################
# Process entry point
########################################
    .global main
main:
    # pushq   %rbp
    # movq    %rsp, %rbp

    call    .Platform.init

    # A class 'Main' must be present in every Cool2020 program.
    # Create a new instance of 'Main'.
    movq    $Main_proto_obj, %rdi
    call    .Runtime.copy_object

    # 'Main..ctor' is a Cool2020 program's entry point.
    # Pass a reference to the newly created 'Main' instance in %rdi.
    # Invoke the constructor.
    movq    %rax, %rdi
    call    Main..ctor

    # movq    %rbp, %rsp
    # popq    %rbp
    
    ret
